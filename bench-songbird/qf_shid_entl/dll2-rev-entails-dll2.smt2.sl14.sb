
data RefDLL2_t {
    RefDLL2_t prev;
    RefDLL2_t next;
    RefDLL2_t prev2;
    RefDLL2_t next2;
    RefDLL2_t down;
};

pred DLL1_plus(hd,p) := 
    (hd->RefDLL2_t{prev:p,next:nil,prev2:nil,next2:nil,down:nil})
    \/ (exists x. hd->RefDLL2_t{prev:p,next:x,prev2:nil,next2:nil,down:nil} * DLL1_plus(x,hd));

pred DLL2_plus(hd,p,tl,n) := 
    (exists down_hd. hd->RefDLL2_t{prev:nil,next:nil,prev2:p,next2:n,down:down_hd} * DLL1_plus(down_hd,hd) & hd=tl)
    \/ (exists x,down_hd. hd->RefDLL2_t{prev:nil,next:nil,prev2:p,next2:x,down:down_hd} * DLL1_plus(down_hd,hd) * DLL2_plus(x,hd,tl,n));

pred DLL2_plus_rev(hd,p,tl,n) := 
    (exists down_hd. hd->RefDLL2_t{prev:nil,next:nil,prev2:p,next2:n,down:down_hd} * DLL1_plus(down_hd,hd) & hd=tl)
    \/ (exists x,down_hd. tl->RefDLL2_t{prev:nil,next:nil,prev2:x,next2:n,down:down_hd} * DLL1_plus(down_hd,tl) * DLL2_plus_rev(hd,p,x,tl));


checkentail DLL2_plus_rev(x,y,u,v)
    |- DLL2_plus(x,y,u,v);
