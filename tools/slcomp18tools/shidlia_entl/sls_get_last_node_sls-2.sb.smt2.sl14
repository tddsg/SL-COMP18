(set-logic QF_S)
(set-info :source | Songbird - https://songbird-prover.github.io/ |)
(set-info :smt-lib-version 2)
(set-info :category "crafted")
(set-info :status unsat)
(declare-sort Refnode 0)
;; Declare cell type node
(declare-fun next () (Field Refnode Refnode) )
(declare-fun val () (Field Refnode Int) )

;; IGNORE declare-heap 
(define-fun sls ((?x_1 Refnode) (?y_2 Refnode) (?l_3 Int) (?u_4 Int) ) 
        Space 
    (tospace (or 
            (and 
                (tobool (pto ?x_1
                    (sref (ref next ?y_2) (ref val ?l_3) ) 
                ) ) 
                (= ?l_3 ?u_4  )
            )
            (exists ((?t_5 Refnode) (?a_6 Int) ) 
                (and 
                    (tobool (ssep 
                        (pto ?x_1
                            (sref (ref next ?t_5) (ref val ?l_3) ) 
                        ) 
                        (sls ?t_5 ?y_2 ?a_6 ?u_4) 
                    ) ) 
                    (and 
                        (<= ?a_6 ?u_4) 
                        (<= ?l_3 ?a_6) 
                    )
                )
            ) 
        ) 
    )
)
(check-sat)
(declare-fun x () Refnode)
(declare-fun y () Refnode)
(declare-fun l () Int)
(declare-fun u () Int)

(assert (and 
        (tobool (sls x y l u) )
        (< l u) 
    )
 )

(assert (not (exists ((?a Refnode) (?t Refnode) (?r Int) ) 
        (and 
            (tobool (ssep 
                (pto ?t
                    (sref (ref next y) (ref val u) ) 
                ) 
                (sls ?a ?t l ?r) 
            ) ) 
            (<= ?r u) 
        )
    )  )
 )
(check-sat)
