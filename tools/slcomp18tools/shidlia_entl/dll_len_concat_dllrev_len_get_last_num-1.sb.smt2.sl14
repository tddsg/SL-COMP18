(set-logic QF_S)
(set-info :source | Songbird - https://songbird-prover.github.io/ |)
(set-info :smt-lib-version 2)
(set-info :category "crafted")
(set-info :status unsat)
(declare-sort Refnode 0)
;; Declare cell type node
(declare-fun next () (Field Refnode Refnode) )
(declare-fun prev () (Field Refnode Refnode) )

;; IGNORE declare-heap 
(define-fun dll ((?hd_1 Refnode) (?p_2 Refnode) (?tl_3 Refnode) (?n_4 Refnode) (?len_5 Int) ) 
        Space 
    (tospace (or 
            (and 
                (tobool (pto ?hd_1
                    (sref (ref next ?n_4) (ref prev ?p_2) ) 
                ) ) 
                (and 
                    (= (+ ?len_5 (- 1) )  0  )
                    (= ?hd_1 ?tl_3  )
                )
            )
            (exists ((?x_6 Refnode) ) 
                (and 
                    (tobool (ssep 
                        (pto ?hd_1
                            (sref (ref next ?x_6) (ref prev ?p_2) ) 
                        ) 
                        (dll ?x_6 ?hd_1 ?tl_3 ?n_4 (+ ?len_5 (- 1) ) ) 
                    ) ) 
                    (<= 1 (+ ?len_5 (- 1) ) ) 
                )
            ) 
        ) 
    )
)
(define-fun dll_rev ((?hd_7 Refnode) (?p_8 Refnode) (?tl_9 Refnode) (?n_10 Refnode) (?len_11 Int) ) 
        Space 
    (tospace (or 
            (and 
                (tobool (pto ?hd_7
                    (sref (ref next ?n_10) (ref prev ?p_8) ) 
                ) ) 
                (and 
                    (= (+ ?len_11 (- 1) )  0  )
                    (= ?hd_7 ?tl_9  )
                )
            )
            (exists ((?x_12 Refnode) ) 
                (and 
                    (tobool (ssep 
                        (pto ?tl_9
                            (sref (ref next ?n_10) (ref prev ?x_12) ) 
                        ) 
                        (dll_rev ?hd_7 ?p_8 ?x_12 ?tl_9 (+ ?len_11 (- 1) ) ) 
                    ) ) 
                    (<= 1 (+ ?len_11 (- 1) ) ) 
                )
            ) 
        ) 
    )
)
(check-sat)
(declare-fun u () Refnode)
(declare-fun v () Refnode)
(declare-fun y () Refnode)
(declare-fun x () Refnode)
(declare-fun m () Int)
(declare-fun z () Refnode)
(declare-fun t () Refnode)

(assert (tobool (ssep 
        (dll u v y x m) 
        (dll_rev x y z t 200) 
    ) ) 
 )

(assert (not (exists ((?w Refnode) ) 
        (tobool (ssep 
            (pto z
                (sref (ref next t) (ref prev ?w) ) 
            ) 
            (dll u v ?w z (+ m 199) ) 
        ) ) 
    )  )
 )
(check-sat)
