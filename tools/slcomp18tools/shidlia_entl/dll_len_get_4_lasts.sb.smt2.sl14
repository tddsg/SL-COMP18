(set-logic QF_S)
(set-info :source | Songbird - https://songbird-prover.github.io/ |)
(set-info :smt-lib-version 2)
(set-info :category "crafted")
(set-info :status unsat)
(declare-sort Refnode 0)
;; Declare cell type node
(declare-fun next () (Field Refnode Refnode) )
(declare-fun prev () (Field Refnode Refnode) )

;; IGNORE declare-heap 
(define-fun dll ((?hd_1 Refnode) (?p_2 Refnode) (?tl_3 Refnode) (?n_4 Refnode) (?len_5 Int) ) 
        Space 
    (tospace (or 
            (and 
                (tobool (pto ?hd_1
                    (sref (ref next ?n_4) (ref prev ?p_2) ) 
                ) ) 
                (and 
                    (= (- ?len_5 1)  0  )
                    (= ?hd_1 ?tl_3  )
                )
            )
            (exists ((?x_6 Refnode) (?k Int) ) 
                (and 
                    (tobool (ssep 
                        (pto ?hd_1
                            (sref (ref next ?x_6) (ref prev ?p_2) ) 
                        ) 
                        (dll ?x_6 ?hd_1 ?tl_3 ?n_4 ?k) 
                    ) ) 
                    (= ?k (- ?len_5 1)   )
                    (<= 1 (- ?len_5 1) ) 
                )
            ) 
        ) 
    )
)
(check-sat)
(declare-fun x () Refnode)
(declare-fun y () Refnode)
(declare-fun z () Refnode)
(declare-fun t () Refnode)
(declare-fun k1000 () Int)
(declare-fun k996 () Int)

(assert (and 
        (= k1000 1000  )
        (= k996 996  )
        (tobool (dll x y z t k1000) )
    )
 )

(assert (not (exists ((?u1 Refnode) (?u2 Refnode) (?u3 Refnode) (?u4 Refnode) ) 
        (tobool (ssep 
            (pto ?u2
                (sref (ref next ?u3) (ref prev ?u1) ) 
            ) 
            (pto ?u3
                (sref (ref next ?u4) (ref prev ?u2) ) 
            ) 
            (pto ?u4
                (sref (ref next z) (ref prev ?u3) ) 
            ) 
            (pto z
                (sref (ref next t) (ref prev ?u4) ) 
            ) 
            (dll x y ?u1 ?u2 k996) 
        ) ) 
    )  )
 )
(check-sat)
