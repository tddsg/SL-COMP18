(set-logic QF_S)
(set-info :source | Songbird - https://songbird-prover.github.io/ |)
(set-info :smt-lib-version 2)
(set-info :category "crafted")
(set-info :status unsat)
(declare-sort Refnode 0)
;; Declare cell type node
(declare-fun next () (Field Refnode Refnode) )
(declare-fun prev () (Field Refnode Refnode) )

;; IGNORE declare-heap 
(define-fun dll ((?hd_2 Refnode) (?p_3 Refnode) (?tl_4 Refnode) (?n_5 Refnode) (?len_6 Int) ) 
        Space 
    (tospace (or 
            (and 
                (tobool (pto ?hd_2
                    (sref (ref next ?n_5) (ref prev ?p_3) ) 
                ) ) 
                (and 
                    (= (+ ?len_6 (- 1) )  0  )
                    (= ?hd_2 ?tl_4  )
                )
            )
            (exists ((?x_7 Refnode) ) 
                (and 
                    (tobool (ssep 
                        (pto ?hd_2
                            (sref (ref next ?x_7) (ref prev ?p_3) ) 
                        ) 
                        (dll ?x_7 ?hd_2 ?tl_4 ?n_5 (+ ?len_6 (- 1) ) ) 
                    ) ) 
                    (<= 1 (+ ?len_6 (- 1) ) ) 
                )
            ) 
        ) 
    )
)
(define-fun lsrev ((?x_8 Refnode) (?y_9 Refnode) (?len_10 Int) ) 
        Space 
    (tospace (or 
            (and 
                (tobool emp ) 
                (and 
                    (= ?len_10 0  )
                    (= ?x_8 ?y_9  )
                )
            )
            (exists ((?anon_11 Refnode) (?u_12 Refnode) ) 
                (and 
                    (tobool (ssep 
                        (pto ?u_12
                            (sref (ref next ?y_9) (ref prev ?anon_11) ) 
                        ) 
                        (lsrev ?x_8 ?u_12 (+ ?len_10 (- 1) ) ) 
                    ) ) 
                    (<= 0 (+ ?len_10 (- 1) ) ) 
                )
            ) 
        ) 
    )
)
(check-sat)
(declare-fun x () Refnode)
(declare-fun y () Refnode)
(declare-fun z () Refnode)
(declare-fun t () Refnode)
(declare-fun n () Int)

(assert (tobool (dll x y z t n) )
 )

(assert (not (exists ((?u Refnode) ) 
        (tobool (ssep 
            (pto x
                (sref (ref next ?u) (ref prev y) ) 
            ) 
            (lsrev ?u t (+ n (- 1) ) ) 
        ) ) 
    )  )
 )
(check-sat)
