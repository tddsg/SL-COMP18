
data Refnode {
    Refnode parent;
    Refnode left;
    Refnode right;
    Refnode next;
};

pred tree(in) := 
    (exists p_35,D1_36,r_37,n_38. in->Refnode{parent:p_35,left:D1_36,right:r_37,next:n_38} & nil=r_37)
    \/ (exists p_39,l_40,r_41,D2_42. in->Refnode{parent:p_39,left:l_40,right:r_41,next:D2_42} * tree(l_40) * tree(r_41) & nil!=r_41);

pred tll(in,p,ll,lr) := 
    (exists lr_28,p_21,D1_22,l_23. in->Refnode{parent:p_21,left:D1_22,right:l_23,next:lr_28} & nil=l_23 & in=ll & lr=lr_28)
    \/ (exists p_29,self_30,ll_31,self_32,z_33,lr_34,l_24,r_25,D2_26,z_27. in->Refnode{parent:p_29,left:l_24,right:r_25,next:D2_26} * tll(l_24,self_30,ll_31,z_27) * tll(r_25,self_32,z_33,lr_34) & nil!=r_25 & p=p_29 & in=self_30 & ll=ll_31 & in=self_32 & z_33=z_27 & lr=lr_34);

pred right_nil(in) := (exists p,l,r,n. in->Refnode{parent:p,left:l,right:r,next:n} & nil=r);

pred eright_nil(in) := (exists p0,l0,r0,n0,p1,l1,r1,n1. in->Refnode{parent:p0,left:l0,right:r0,next:n0} & p0=p1 & l0=l1 & r0=r1 & n0=n1 & nil=r1);

pred right_nnil(in) := (exists p,l,r,n. in->Refnode{parent:p,left:l,right:r,next:n} * tree(l) * tree(r) & nil!=r);

pred eright_nnil(in) := (exists p0,l0,r0,n0,p1,l1,r1,n1. in->Refnode{parent:p0,left:l0,right:r0,next:n0} * tree(l1) * tree(r1) & p0=p1 & l0=l1 & r0=r1 & n0=n1 & nil=r1);

pred enode(in,p,l,r,n) := (exists p0,l0,r0,n0. in->Refnode{parent:p0,left:l0,right:r0,next:n0} & p=p0 & l=l0 & r=r0 & n=n0);

pred etll(in,p,t,r) := (exists p1,t1. tll(in,p1,r,t1) & p=p1 & t=t1);

pred ltll(in,p,l,r,D,v,t) := (exists l1. in->Refnode{parent:p,left:l,right:r,next:D} * tll(l,in,v,l1) * tll(r,in,l1,t));


checkentail tree(l) * tree(r) * xprm->Refnode{parent:pprm,left:l,right:r,next:D} & parent0=p & pprm=p1 & xprm=x & tprm=t & nil!=r
    |- enode(xprm,pprm,l,r,D) * tree(l) * tree(r) & parent0=p & pprm=p1 & xprm=x & tprm=t & nil!=r;
