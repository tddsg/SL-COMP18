(set-logic QF_S)
(set-info :source |
C. Enea, O. Lengal, M. Sighireanu, and T. Vojnar
[Compositional Entailment Checking for a Fragment of Separation Logic]
http://www.liafa.univ-paris-diderot.fr/spen
|)
(set-info :smt-lib-version 2)
(set-info :category "crafted")
(set-info :status unsat)
(set-info :version "2014-06-09")
(declare-sort RefDll_t 0)
;; Declare cell type Dll_t
(declare-fun next () (Field RefDll_t RefDll_t) )
(declare-fun prev () (Field RefDll_t RefDll_t) )

;; IGNORE declare-heap 
(define-fun dll ((?fr RefDll_t) (?bk RefDll_t) (?pr RefDll_t) (?nx RefDll_t) ) 
        Space 
    (tospace (or 
            (and 
                (= ?fr ?nx  )
                (= ?bk ?pr  )
                (tobool emp ) 
            )
            (exists ((?u RefDll_t) ) 
                (and 
                    (distinct ?fr ?nx  )
                    (distinct ?bk ?pr  )
                    (tobool (ssep 
                        (pto ?fr
                            (sref (ref next ?u) (ref prev ?pr) ) 
                        ) 
                        (dll ?u ?bk ?fr ?nx) 
                    ) ) 
                )
            ) 
        ) 
    )
)
(check-sat)
(declare-fun x () RefDll_t)
(declare-fun y () RefDll_t)
(declare-fun z () RefDll_t)
(declare-fun x1 () RefDll_t)
(declare-fun x2 () RefDll_t)
(declare-fun x3 () RefDll_t)
(declare-fun x4 () RefDll_t)

(assert (and 
        (distinct x z  )
        (distinct z x1  )
        (distinct z x2  )
        (distinct z x3  )
        (distinct z x4  )
        (distinct y z  )
        (tobool (ssep 
            (pto x
                (sref (ref next x1) (ref prev nil ) ) 
            ) 
            (pto x1
                (sref (ref next x2) (ref prev x) ) 
            ) 
            (pto x2
                (sref (ref next x3) (ref prev x1) ) 
            ) 
            (pto x3
                (sref (ref next x4) (ref prev x2) ) 
            ) 
            (pto x4
                (sref (ref next y) (ref prev x3) ) 
            ) 
            (pto y
                (sref (ref next z) (ref prev x4) ) 
            ) 
        ) ) 
    )
 )

(assert (not (tobool (dll x y nil  z) ) )
 )
(check-sat)
