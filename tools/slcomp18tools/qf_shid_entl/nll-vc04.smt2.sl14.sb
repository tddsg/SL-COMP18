
data RefNLL_lvl1_t {
    RefNLL_lvl1_t next1;
};

data RefNLL_lvl2_t {
    RefNLL_lvl2_t next2;
    RefNLL_lvl1_t down;
};

pred lso(in,out) := 
    (emp & in=out)
    \/ (exists u. in->RefNLL_lvl1_t{next1:u} * lso(u,out) & in!=out);

pred nll(in,out,boundary) := 
    (emp & in=out)
    \/ (exists u,Z1. in->RefNLL_lvl2_t{next2:u,down:Z1} * lso(Z1,boundary) * nll(u,out,boundary) & in!=out);


checkentail x1->RefNLL_lvl2_t{next2:x2,down:x1_1} * x1_1->RefNLL_lvl1_t{next1:x1_2} * x1_2->RefNLL_lvl1_t{next1:x1_3} * x1_3->RefNLL_lvl1_t{next1:nil} * nll(x2,x3,nil) * x3->RefNLL_lvl2_t{next2:nil,down:x3_1} * x3_1->RefNLL_lvl1_t{next1:x3_2} * x3_2->RefNLL_lvl1_t{next1:nil}
    |- nll(x1,nil,nil);
