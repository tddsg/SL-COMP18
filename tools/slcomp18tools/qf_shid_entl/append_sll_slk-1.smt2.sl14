(set-logic QF_S)
(set-info :source |  Sleek solver
  http://loris-7.ddns.comp.nus.edu.sg/~project/s2/beta/
|)
(set-info :smt-lib-version 2)
(set-info :category "crafted")
(set-info :status unsat)
(declare-sort Refnode 0)
;; Declare cell type node
(declare-fun next () (Field Refnode Refnode) )

;; IGNORE declare-heap 
(define-fun ll ((?in Refnode) ) 
 Space 
    (tospace (or 
            (and 
                (= nil  ?in  )
                (tobool emp ) 
            )
            (exists ((?q_18 Refnode) ) 
                (tobool (ssep 
                    (pto ?in
                        (ref next ?q_18) 
                    ) 
                    (ll ?q_18) 
                ) ) 
            ) 
        ) 
    )
)
(define-fun ll_e1 ((?in Refnode) ) 
 Space 
    (tospace (exists ((?q Refnode) ) 
            (tobool (ssep 
                (pto ?in
                    (ref next ?q) 
                ) 
                (ll ?q) 
            ) ) 
        ) 
    )
)
(define-fun ll_e2 ((?in Refnode) ) 
 Space 
    (tospace (exists ((?p Refnode) (?q Refnode) ) 
            (and 
                (= ?p ?q  )
                (tobool (ssep 
                    (pto ?in
                        (ref next ?p) 
                    ) 
                    (ll ?q) 
                ) ) 
            )
        ) 
    )
)
(define-fun node_e1 ((?in Refnode) (?q Refnode) ) 
 Space 
    (tospace (exists ((?p Refnode) ) 
            (and 
                (= ?q ?p  )
                (tobool (pto ?in
                    (ref next ?p) 
                ) ) 
            )
        ) 
    )
)
(check-sat)
(declare-fun xprm () Refnode)
(declare-fun yprm () Refnode)
(declare-fun y () Refnode)
(declare-fun x () Refnode)

(assert (and 
        (= xprm x  )
        (= yprm y  )
        (distinct nil  x  )
        (tobool (ssep 
            (ll_e1 xprm) 
            (ll y) 
        ) ) 
    )
 )

(assert (not (and 
        (= xprm x  )
        (= yprm y  )
        (distinct nil  x  )
        (tobool (ssep 
            (ll_e2 xprm) 
            (ll y) 
        ) ) 
    ) )
 )
(check-sat)
