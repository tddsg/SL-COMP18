(set-logic QF_S)
(set-info :source |  Sleek solver
  http://loris-7.ddns.comp.nus.edu.sg/~project/s2/beta/
|)
(set-info :smt-lib-version 2)
(set-info :category "crafted")
(set-info :status unsat)
(declare-sort Refnode 0)
;; Declare cell type node
(declare-fun parent () (Field Refnode Refnode) )
(declare-fun left () (Field Refnode Refnode) )
(declare-fun right () (Field Refnode Refnode) )
(declare-fun next () (Field Refnode Refnode) )

;; IGNORE declare-heap 
(define-fun tree ((?in Refnode) ) 
 Space 
    (tospace (or 
            (exists ((?p_35 Refnode) (?D1_36 Refnode) (?r_37 Refnode) (?n_38 Refnode) ) 
                (and 
                    (= nil  ?r_37  )
                    (tobool (pto ?in
                        (sref (ref parent ?p_35) (ref left ?D1_36) (ref right ?r_37) (ref next ?n_38) ) 
                    ) ) 
                )
            ) 
            (exists ((?p_39 Refnode) (?l_40 Refnode) (?r_41 Refnode) (?D2_42 Refnode) ) 
                (and 
                    (distinct nil  ?r_41  )
                    (tobool (ssep 
                        (pto ?in
                            (sref (ref parent ?p_39) (ref left ?l_40) (ref right ?r_41) (ref next ?D2_42) ) 
                        ) 
                        (tree ?l_40) 
                        (tree ?r_41) 
                    ) ) 
                )
            ) 
        ) 
    )
)
(define-fun tll ((?in Refnode) (?p Refnode) (?ll Refnode) (?lr Refnode) ) 
 Space 
    (tospace (or 
            (exists ((?lr_28 Refnode) (?p_21 Refnode) (?D1_22 Refnode) (?l_23 Refnode) ) 
                (and 
                    (= nil  ?l_23  )
                    (= ?in ?ll  )
                    (= ?lr ?lr_28  )
                    (tobool (pto ?in
                        (sref (ref parent ?p_21) (ref left ?D1_22) (ref right ?l_23) (ref next ?lr_28) ) 
                    ) ) 
                )
            ) 
            (exists ((?p_29 Refnode) (?self_30 Refnode) (?ll_31 Refnode) (?self_32 Refnode) (?z_33 Refnode) (?lr_34 Refnode) (?l_24 Refnode) (?r_25 Refnode) (?D2_26 Refnode) (?z_27 Refnode) ) 
                (and 
                    (distinct nil  ?r_25  )
                    (= ?p ?p_29  )
                    (= ?in ?self_30  )
                    (= ?ll ?ll_31  )
                    (= ?in ?self_32  )
                    (= ?z_33 ?z_27  )
                    (= ?lr ?lr_34  )
                    (tobool (ssep 
                        (pto ?in
                            (sref (ref parent ?p_29) (ref left ?l_24) (ref right ?r_25) (ref next ?D2_26) ) 
                        ) 
                        (tll ?l_24 ?self_30 ?ll_31 ?z_27) 
                        (tll ?r_25 ?self_32 ?z_33 ?lr_34) 
                    ) ) 
                )
            ) 
        ) 
    )
)
(define-fun right_nil ((?in Refnode) ) 
 Space 
    (tospace (exists ((?p Refnode) (?l Refnode) (?r Refnode) (?n Refnode) ) 
            (and 
                (= nil  ?r  )
                (tobool (pto ?in
                    (sref (ref parent ?p) (ref left ?l) (ref right ?r) (ref next ?n) ) 
                ) ) 
            )
        ) 
    )
)
(define-fun eright_nil ((?in Refnode) ) 
 Space 
    (tospace (exists ((?p0 Refnode) (?l0 Refnode) (?r0 Refnode) (?n0 Refnode) (?p1 Refnode) (?l1 Refnode) (?r1 Refnode) (?n1 Refnode) ) 
            (and 
                (= ?p0 ?p1  )
                (= ?l0 ?l1  )
                (= ?r0 ?r1  )
                (= ?n0 ?n1  )
                (= nil  ?r1  )
                (tobool (pto ?in
                    (sref (ref parent ?p0) (ref left ?l0) (ref right ?r0) (ref next ?n0) ) 
                ) ) 
            )
        ) 
    )
)
(define-fun right_nnil ((?in Refnode) ) 
 Space 
    (tospace (exists ((?p Refnode) (?l Refnode) (?r Refnode) (?n Refnode) ) 
            (and 
                (distinct nil  ?r  )
                (tobool (ssep 
                    (pto ?in
                        (sref (ref parent ?p) (ref left ?l) (ref right ?r) (ref next ?n) ) 
                    ) 
                    (tree ?l) 
                    (tree ?r) 
                ) ) 
            )
        ) 
    )
)
(define-fun eright_nnil ((?in Refnode) ) 
 Space 
    (tospace (exists ((?p0 Refnode) (?l0 Refnode) (?r0 Refnode) (?n0 Refnode) (?p1 Refnode) (?l1 Refnode) (?r1 Refnode) (?n1 Refnode) ) 
            (and 
                (= ?p0 ?p1  )
                (= ?l0 ?l1  )
                (= ?r0 ?r1  )
                (= ?n0 ?n1  )
                (= nil  ?r1  )
                (tobool (ssep 
                    (pto ?in
                        (sref (ref parent ?p0) (ref left ?l0) (ref right ?r0) (ref next ?n0) ) 
                    ) 
                    (tree ?l1) 
                    (tree ?r1) 
                ) ) 
            )
        ) 
    )
)
(define-fun enode ((?in Refnode) (?p Refnode) (?l Refnode) (?r Refnode) (?n Refnode) ) 
 Space 
    (tospace (exists ((?p0 Refnode) (?l0 Refnode) (?r0 Refnode) (?n0 Refnode) ) 
            (and 
                (= ?p ?p0  )
                (= ?l ?l0  )
                (= ?r ?r0  )
                (= ?n ?n0  )
                (tobool (pto ?in
                    (sref (ref parent ?p0) (ref left ?l0) (ref right ?r0) (ref next ?n0) ) 
                ) ) 
            )
        ) 
    )
)
(define-fun etll ((?in Refnode) (?p Refnode) (?t Refnode) (?r Refnode) ) 
 Space 
    (tospace (exists ((?p1 Refnode) (?t1 Refnode) ) 
            (and 
                (= ?p ?p1  )
                (= ?t ?t1  )
                (tobool (tll ?in ?p1 ?r ?t1) )
            )
        ) 
    )
)
(define-fun ltll ((?in Refnode) (?p Refnode) (?l Refnode) (?r Refnode) (?D Refnode) (?v Refnode) (?t Refnode) ) 
 Space 
    (tospace (exists ((?l1 Refnode) ) 
            (tobool (ssep 
                (pto ?in
                    (sref (ref parent ?p) (ref left ?l) (ref right ?r) (ref next ?D) ) 
                ) 
                (tll ?l ?in ?v ?l1) 
                (tll ?r ?in ?l1 ?t) 
            ) ) 
        ) 
    )
)
(check-sat)
(declare-fun lprm () Refnode)
(declare-fun vprm () Refnode)
(declare-fun pprm () Refnode)
(declare-fun xprm () Refnode)
(declare-fun tprm () Refnode)
(declare-fun parent0 () Refnode)
(declare-fun p () Refnode)
(declare-fun p1 () Refnode)
(declare-fun x () Refnode)
(declare-fun t () Refnode)
(declare-fun l () Refnode)
(declare-fun r () Refnode)
(declare-fun D () Refnode)

(assert (and 
        (= vprm l  )
        (distinct nil  r  )
        (= parent0 p  )
        (= pprm p1  )
        (= xprm x  )
        (= tprm t  )
        (tobool (ssep 
            (tree l) 
            (tll r xprm lprm tprm) 
            (pto xprm
                (sref (ref parent pprm) (ref left l) (ref right r) (ref next D) ) 
            ) 
        ) ) 
    )
 )

(assert (not (and 
        (= vprm l  )
        (distinct nil  r  )
        (= parent0 p  )
        (= pprm p1  )
        (= xprm x  )
        (= tprm t  )
        (tobool (ssep 
            (tree vprm) 
            (tll r xprm lprm tprm) 
            (pto xprm
                (sref (ref parent pprm) (ref left l) (ref right r) (ref next D) ) 
            ) 
        ) ) 
    ) )
 )
(check-sat)
