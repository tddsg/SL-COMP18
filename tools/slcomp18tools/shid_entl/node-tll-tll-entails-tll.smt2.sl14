(set-logic QF_S)
(set-info :source | 
  R. Iosif, A. Rogalewicz and T. Vojnar. 
  Deciding Entailments in Inductive Separation Logic with Tree Automata arXiv:1402.2127. 
  http://www.fit.vutbr.cz/research/groups/verifit/tools/slide/ 
|)
(set-info :smt-lib-version 2)
(set-info :category "crafted")
(set-info :status unsat)
(declare-sort RefTLL_t 0)
;; Declare cell type TLL_t
(declare-fun left () (Field RefTLL_t RefTLL_t) )
(declare-fun right () (Field RefTLL_t RefTLL_t) )
(declare-fun next () (Field RefTLL_t RefTLL_t) )
(declare-fun parent () (Field RefTLL_t RefTLL_t) )

;; IGNORE declare-heap 
(define-fun TLL_plus ((?root RefTLL_t) (?pra RefTLL_t) (?ll RefTLL_t) (?lr RefTLL_t) ) 
        Space 
    (tospace (or 
            (and 
                (= ?root ?ll  )
                (tobool (pto ?root
                    (sref (ref left nil ) (ref right nil ) (ref next ?lr) (ref parent ?pra) ) 
                ) ) 
            )
            (exists ((?l RefTLL_t) (?r RefTLL_t) (?z RefTLL_t) ) 
                (tobool (ssep 
                    (pto ?root
                        (sref (ref left ?l) (ref right ?r) (ref next nil ) (ref parent ?pra) ) 
                    ) 
                    (TLL_plus ?l ?root ?ll ?z) 
                    (TLL_plus ?r ?root ?z ?lr) 
                ) ) 
            ) 
        ) 
    )
)
(check-sat)
(declare-fun a () RefTLL_t)
(declare-fun c () RefTLL_t)

(assert (exists ((?l RefTLL_t) (?r RefTLL_t) (?z RefTLL_t) ) 
        (tobool (ssep 
            (pto a
                (sref (ref left ?l) (ref right ?r) (ref next nil ) (ref parent nil ) ) 
            ) 
            (TLL_plus ?l a c ?z) 
            (TLL_plus ?r a ?z nil ) 
        ) ) 
    ) 
 )

(assert (not (tobool (TLL_plus a nil  c nil ) ) )
 )
(check-sat)
