(set-logic QF_S)
(set-info :source | 
  R. Iosif, A. Rogalewicz and T. Vojnar. 
  Deciding Entailments in Inductive Separation Logic with Tree Automata arXiv:1402.2127. 
  http://www.fit.vutbr.cz/research/groups/verifit/tools/slide/ 
|)
(set-info :smt-lib-version 2)
(set-info :category "crafted")
(set-info :status unsat)
(declare-sort RefTLL_t 0)
;; Declare cell type TLL_t
(declare-fun left () (Field RefTLL_t RefTLL_t) )
(declare-fun right () (Field RefTLL_t RefTLL_t) )
(declare-fun next () (Field RefTLL_t RefTLL_t) )
(declare-fun parent () (Field RefTLL_t RefTLL_t) )

;; IGNORE declare-heap 
(define-fun TLL_plus ((?root RefTLL_t) (?pra RefTLL_t) (?ll RefTLL_t) (?lr RefTLL_t) ) 
 Space 
    (tospace (or 
            (and 
                (= ?root ?ll  )
                (tobool (pto ?root
                    (sref (ref left nil ) (ref right nil ) (ref next ?lr) (ref parent ?pra) ) 
                ) ) 
            )
            (exists ((?l RefTLL_t) (?r RefTLL_t) (?z RefTLL_t) ) 
                (tobool (ssep 
                    (pto ?root
                        (sref (ref left ?l) (ref right ?r) (ref next nil ) (ref parent ?pra) ) 
                    ) 
                    (TLL_plus ?l ?root ?ll ?z) 
                    (TLL_plus ?r ?root ?z ?lr) 
                ) ) 
            ) 
        ) 
    )
)
(define-fun TLL_tail ((?root RefTLL_t) (?pra RefTLL_t) (?ll RefTLL_t) (?tr RefTLL_t) (?lr RefTLL_t) ) 
 Space 
    (tospace (or 
            (and 
                (= ?root ?ll  )
                (= ?root ?tr  )
                (tobool (pto ?root
                    (sref (ref left nil ) (ref right nil ) (ref next ?lr) (ref parent ?pra) ) 
                ) ) 
            )
            (exists ((?l RefTLL_t) (?r RefTLL_t) (?z RefTLL_t) ) 
                (tobool (ssep 
                    (pto ?root
                        (sref (ref left ?l) (ref right ?r) (ref next nil ) (ref parent ?pra) ) 
                    ) 
                    (TLL_plus ?l ?root ?ll ?z) 
                    (TLL_tail ?r ?root ?z ?tr ?lr) 
                ) ) 
            ) 
        ) 
    )
)
(check-sat)
(declare-fun root0 () RefTLL_t)
(declare-fun ll0 () RefTLL_t)
(declare-fun tr0 () RefTLL_t)
(declare-fun root1 () RefTLL_t)
(declare-fun ll1 () RefTLL_t)
(declare-fun tr1 () RefTLL_t)
(declare-fun root2 () RefTLL_t)
(declare-fun ll2 () RefTLL_t)
(declare-fun tr2 () RefTLL_t)
(declare-fun root3 () RefTLL_t)
(declare-fun ll3 () RefTLL_t)
(declare-fun tr3 () RefTLL_t)
(declare-fun root4 () RefTLL_t)
(declare-fun ll4 () RefTLL_t)
(declare-fun tr4 () RefTLL_t)
(declare-fun root5 () RefTLL_t)
(declare-fun ll5 () RefTLL_t)
(declare-fun tr5 () RefTLL_t)
(declare-fun root6 () RefTLL_t)
(declare-fun ll6 () RefTLL_t)
(declare-fun tr6 () RefTLL_t)
(declare-fun root7 () RefTLL_t)
(declare-fun ll7 () RefTLL_t)
(declare-fun tr7 () RefTLL_t)
(declare-fun root8 () RefTLL_t)
(declare-fun ll8 () RefTLL_t)
(declare-fun tr8 () RefTLL_t)
(declare-fun root9 () RefTLL_t)
(declare-fun ll9 () RefTLL_t)
(declare-fun tr9 () RefTLL_t)
(declare-fun root10 () RefTLL_t)
(declare-fun ll10 () RefTLL_t)
(declare-fun tr10 () RefTLL_t)
(declare-fun root11 () RefTLL_t)
(declare-fun ll11 () RefTLL_t)
(declare-fun tr11 () RefTLL_t)
(declare-fun root12 () RefTLL_t)
(declare-fun ll12 () RefTLL_t)
(declare-fun tr12 () RefTLL_t)
(declare-fun root13 () RefTLL_t)
(declare-fun ll13 () RefTLL_t)
(declare-fun tr13 () RefTLL_t)
(declare-fun root14 () RefTLL_t)
(declare-fun ll14 () RefTLL_t)
(declare-fun tr14 () RefTLL_t)
(declare-fun root15 () RefTLL_t)
(declare-fun ll15 () RefTLL_t)
(declare-fun tr15 () RefTLL_t)
(declare-fun root16 () RefTLL_t)
(declare-fun ll16 () RefTLL_t)
(declare-fun tr16 () RefTLL_t)
(declare-fun root17 () RefTLL_t)
(declare-fun ll17 () RefTLL_t)
(declare-fun tr17 () RefTLL_t)
(declare-fun root18 () RefTLL_t)
(declare-fun ll18 () RefTLL_t)
(declare-fun tr18 () RefTLL_t)
(declare-fun root19 () RefTLL_t)
(declare-fun ll19 () RefTLL_t)
(declare-fun tr19 () RefTLL_t)

(assert (tobool (ssep 
        (TLL_tail root0 nil  ll0 tr0 root1) 
        (TLL_tail root1 tr0 ll1 tr1 root2) 
        (TLL_tail root2 tr1 ll2 tr2 root3) 
        (TLL_tail root3 tr2 ll3 tr3 root4) 
        (TLL_tail root4 tr3 ll4 tr4 root5) 
        (TLL_tail root5 tr4 ll5 tr5 root6) 
        (TLL_tail root6 tr5 ll6 tr6 root7) 
        (TLL_tail root7 tr6 ll7 tr7 root8) 
        (TLL_tail root8 tr7 ll8 tr8 root9) 
        (TLL_tail root9 tr8 ll9 tr9 root10) 
        (TLL_tail root10 tr9 ll10 tr10 root11) 
        (TLL_tail root11 tr10 ll11 tr11 root12) 
        (TLL_tail root12 tr11 ll12 tr12 root13) 
        (TLL_tail root13 tr12 ll13 tr13 root14) 
        (TLL_tail root14 tr13 ll14 tr14 root15) 
        (TLL_tail root15 tr14 ll15 tr15 root16) 
        (TLL_tail root16 tr15 ll16 tr16 root17) 
        (TLL_tail root17 tr16 ll17 tr17 root18) 
        (TLL_tail root18 tr17 ll18 tr18 root19) 
        (TLL_tail root19 tr18 ll19 tr19 nil ) 
    ) ) 
 )

(assert (not (exists ((?root0 RefTLL_t) (?ll0 RefTLL_t) (?tr0 RefTLL_t) (?root1 RefTLL_t) (?ll1 RefTLL_t) (?tr1 RefTLL_t) (?root2 RefTLL_t) (?ll2 RefTLL_t) (?tr2 RefTLL_t) (?root3 RefTLL_t) (?ll3 RefTLL_t) (?tr3 RefTLL_t) (?root4 RefTLL_t) (?ll4 RefTLL_t) (?tr4 RefTLL_t) (?root5 RefTLL_t) (?ll5 RefTLL_t) (?tr5 RefTLL_t) (?root6 RefTLL_t) (?ll6 RefTLL_t) (?tr6 RefTLL_t) (?root7 RefTLL_t) (?ll7 RefTLL_t) (?tr7 RefTLL_t) (?root8 RefTLL_t) (?ll8 RefTLL_t) (?tr8 RefTLL_t) (?root9 RefTLL_t) (?ll9 RefTLL_t) (?tr9 RefTLL_t) (?root10 RefTLL_t) (?ll10 RefTLL_t) (?tr10 RefTLL_t) (?root11 RefTLL_t) (?ll11 RefTLL_t) (?tr11 RefTLL_t) (?root12 RefTLL_t) (?ll12 RefTLL_t) (?tr12 RefTLL_t) (?root13 RefTLL_t) (?ll13 RefTLL_t) (?tr13 RefTLL_t) (?root14 RefTLL_t) (?ll14 RefTLL_t) (?tr14 RefTLL_t) (?root15 RefTLL_t) (?ll15 RefTLL_t) (?tr15 RefTLL_t) (?root16 RefTLL_t) (?ll16 RefTLL_t) (?tr16 RefTLL_t) (?root17 RefTLL_t) (?ll17 RefTLL_t) (?tr17 RefTLL_t) (?root18 RefTLL_t) (?ll18 RefTLL_t) (?tr18 RefTLL_t) (?root19 RefTLL_t) (?ll19 RefTLL_t) (?tr19 RefTLL_t) ) 
        (tobool (ssep 
            (TLL_tail ?root0 nil  ?ll0 ?tr0 ?root1) 
            (TLL_tail ?root2 ?tr1 ?ll2 ?tr2 ?root3) 
            (TLL_tail ?root5 ?tr4 ?ll5 ?tr5 ?root6) 
            (TLL_tail ?root8 ?tr7 ?ll8 ?tr8 ?root9) 
            (TLL_tail ?root10 ?tr9 ?ll10 ?tr10 ?root11) 
            (TLL_tail ?root7 ?tr6 ?ll7 ?tr7 ?root8) 
            (TLL_tail ?root9 ?tr8 ?ll9 ?tr9 ?root10) 
            (TLL_tail ?root4 ?tr3 ?ll4 ?tr4 ?root5) 
            (TLL_tail ?root13 ?tr12 ?ll13 ?tr13 ?root14) 
            (TLL_tail ?root11 ?tr10 ?ll11 ?tr11 ?root12) 
            (TLL_tail ?root15 ?tr14 ?ll15 ?tr15 ?root16) 
            (TLL_tail ?root12 ?tr11 ?ll12 ?tr12 ?root13) 
            (TLL_tail ?root17 ?tr16 ?ll17 ?tr17 ?root18) 
            (TLL_tail ?root14 ?tr13 ?ll14 ?tr14 ?root15) 
            (TLL_tail ?root6 ?tr5 ?ll6 ?tr6 ?root7) 
            (TLL_tail ?root19 ?tr18 ?ll19 ?tr19 nil ) 
            (TLL_tail ?root1 ?tr0 ?ll1 ?tr1 ?root2) 
            (TLL_tail ?root16 ?tr15 ?ll16 ?tr16 ?root17) 
            (TLL_tail ?root3 ?tr2 ?ll3 ?tr3 ?root4) 
            (TLL_tail ?root18 ?tr17 ?ll18 ?tr18 ?root19) 
        ) ) 
    )  )
 )
(check-sat)
