(set-logic QF_S)
(set-info :source |
  James Brotherston, Carsten Fuhs, Nikos Gorogiannis, and Juan Navarro PÃ©rez. 
  A decision procedure for satisfiability in separation logic with inductive 
  predicates. CSL-LICS, 2014. 
  https://github.com/ngorogiannis/cyclist/releases/tag/CSL-LICS14
|)
(set-info :smt-lib-version 2)
(set-info :category "crafted")
(set-info :status sat)
(set-info :version "2014-05-31")
(declare-sort RefGTyp 0)
;; Declare cell type GTyp
(declare-fun f0 () (Field RefGTyp RefGTyp) )
(declare-fun f1 () (Field RefGTyp RefGTyp) )

;; IGNORE declare-heap 
(define-fun one ((?x RefGTyp) ) 
 Space 
    (tospace (and 
            (distinct nil  ?x  )
            (tobool emp ) 
        )
    )
)
(define-fun Q ((?y1 RefGTyp) ) 
 Space 
    (tospace (or 
            (tobool (zero ?y1) )
            (exists ((?x1 RefGTyp) ) 
                (tobool (ssep 
                    (succ1circuit ?x1 ?y1) 
                    (Q ?x1) 
                ) ) 
            ) 
        ) 
    )
)
(define-fun P ((?x1 RefGTyp) ) 
 Space 
    (tospace (tobool (ssep 
            (one ?x1) 
            (Q ?x1) 
        ) ) 
    )
)
(define-fun zero ((?x RefGTyp) ) 
 Space 
    (tospace (and 
            (= nil  ?x  )
            (tobool emp ) 
        )
    )
)
(define-fun succ1circuit ((?x1 RefGTyp) (?y1 RefGTyp) ) 
 Space 
    (tospace (tobool (notg ?x1 ?y1) )
    )
)
(define-fun notg ((?x RefGTyp) (?y RefGTyp) ) 
 Space 
    (tospace (or 
            (tobool (ssep 
                (zero ?x) 
                (one ?y) 
            ) ) 
            (tobool (ssep 
                (one ?x) 
                (zero ?y) 
            ) ) 
        ) 
    )
)
(define-fun xorg ((?x RefGTyp) (?y RefGTyp) (?z RefGTyp) ) 
 Space 
    (tospace (or 
            (tobool (ssep 
                (zero ?x) 
                (zero ?y) 
                (zero ?z) 
            ) ) 
            (tobool (ssep 
                (zero ?x) 
                (one ?y) 
                (one ?z) 
            ) ) 
            (tobool (ssep 
                (one ?x) 
                (zero ?y) 
                (one ?z) 
            ) ) 
            (tobool (ssep 
                (one ?x) 
                (one ?y) 
                (zero ?z) 
            ) ) 
        ) 
    )
)
(define-fun andg ((?x RefGTyp) (?y RefGTyp) (?z RefGTyp) ) 
 Space 
    (tospace (or 
            (tobool (ssep 
                (zero ?x) 
                (zero ?z) 
            ) ) 
            (tobool (ssep 
                (zero ?y) 
                (zero ?z) 
            ) ) 
            (tobool (ssep 
                (one ?x) 
                (one ?y) 
                (one ?z) 
            ) ) 
        ) 
    )
)
(check-sat)
(declare-fun x0 () RefGTyp)

(assert (tobool (P x0) )
 )
(check-sat)
