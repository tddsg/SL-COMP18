(set-logic QF_S)
(set-info :source |
Jens Katelaan, Harrsh, https://github.com/katelaan/harrsh/
|)
(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :status sat)
(set-info :version "2018-06-21")
(declare-sort RefSll_t 0)
;; Declare cell type Sll_t
(declare-fun next () (Field RefSll_t RefSll_t) )

;; IGNORE declare-heap 
(define-fun sll ((?x RefSll_t) (?y RefSll_t) ) 
        Space 
    (tospace (or 
            (and 
                (= ?x ?y  )
                (tobool emp ) 
            )
            (exists ((?u RefSll_t) ) 
                (and 
                    (distinct ?x ?y  )
                    (tobool (ssep 
                        (pto ?x
                            (ref next ?u) 
                        ) 
                        (sll ?u ?y) 
                    ) ) 
                )
            ) 
        ) 
    )
)
(define-fun lasso ((?x RefSll_t) ) 
        Space 
    (tospace (or 
            (exists ((?y RefSll_t) ) 
                (tobool (ssep 
                    (pto ?x
                        (ref next ?y) 
                    ) 
                    (lasso ?y) 
                ) ) 
            ) 
            (exists ((?y RefSll_t) ) 
                (tobool (ssep 
                    (pto ?x
                        (ref next ?y) 
                    ) 
                    (sll ?y ?x) 
                ) ) 
            ) 
        ) 
    )
)
(check-sat)
(declare-fun x0 () RefSll_t)
(declare-fun x1 () RefSll_t)
(declare-fun x2 () RefSll_t)
(declare-fun x3 () RefSll_t)
(declare-fun x4 () RefSll_t)
(declare-fun x5 () RefSll_t)

(assert (tobool (ssep 
        (sll x0 x1) 
        (lasso x1) 
        (sll x2 x3) 
        (lasso x3) 
        (sll x4 x5) 
        (lasso x5) 
    ) ) 
 )
(check-sat)
