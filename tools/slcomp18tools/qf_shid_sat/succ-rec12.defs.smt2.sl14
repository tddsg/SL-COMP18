(set-logic QF_S)
(set-info :source |
  James Brotherston, Carsten Fuhs, Nikos Gorogiannis, and Juan Navarro PÃ©rez. 
  A decision procedure for satisfiability in separation logic with inductive 
  predicates. CSL-LICS, 2014. 
  https://github.com/ngorogiannis/cyclist/releases/tag/CSL-LICS14
|)
(set-info :smt-lib-version 2)
(set-info :category "crafted")
(set-info :status sat)
(set-info :version "2014-05-31")
(declare-sort RefGTyp 0)
;; Declare cell type GTyp
(declare-fun f0 () (Field RefGTyp RefGTyp) )
(declare-fun f1 () (Field RefGTyp RefGTyp) )

;; IGNORE declare-heap 
(define-fun one ((?x RefGTyp) ) 
 Space 
    (tospace (and 
            (distinct nil  ?x  )
            (tobool emp ) 
        )
    )
)
(define-fun Q ((?y1 RefGTyp) (?y2 RefGTyp) (?y3 RefGTyp) (?y4 RefGTyp) (?y5 RefGTyp) (?y6 RefGTyp) (?y7 RefGTyp) (?y8 RefGTyp) (?y9 RefGTyp) (?y10 RefGTyp) (?y11 RefGTyp) (?y12 RefGTyp) ) 
 Space 
    (tospace (or 
            (tobool (ssep 
                (zero ?y1) 
                (zero ?y2) 
                (zero ?y3) 
                (zero ?y4) 
                (zero ?y5) 
                (zero ?y6) 
                (zero ?y7) 
                (zero ?y8) 
                (zero ?y9) 
                (zero ?y10) 
                (zero ?y11) 
                (zero ?y12) 
            ) ) 
            (exists ((?x1 RefGTyp) (?x2 RefGTyp) (?x3 RefGTyp) (?x4 RefGTyp) (?x5 RefGTyp) (?x6 RefGTyp) (?x7 RefGTyp) (?x8 RefGTyp) (?x9 RefGTyp) (?x10 RefGTyp) (?x11 RefGTyp) (?x12 RefGTyp) ) 
                (tobool (ssep 
                    (succ12rec ?x1 ?x2 ?x3 ?x4 ?x5 ?x6 ?x7 ?x8 ?x9 ?x10 ?x11 ?x12 ?y1 ?y2 ?y3 ?y4 ?y5 ?y6 ?y7 ?y8 ?y9 ?y10 ?y11 ?y12) 
                    (Q ?x1 ?x2 ?x3 ?x4 ?x5 ?x6 ?x7 ?x8 ?x9 ?x10 ?x11 ?x12) 
                ) ) 
            ) 
        ) 
    )
)
(define-fun P ((?x1 RefGTyp) (?x2 RefGTyp) (?x3 RefGTyp) (?x4 RefGTyp) (?x5 RefGTyp) (?x6 RefGTyp) (?x7 RefGTyp) (?x8 RefGTyp) (?x9 RefGTyp) (?x10 RefGTyp) (?x11 RefGTyp) (?x12 RefGTyp) ) 
 Space 
    (tospace (tobool (ssep 
            (one ?x1) 
            (one ?x2) 
            (one ?x3) 
            (one ?x4) 
            (one ?x5) 
            (one ?x6) 
            (one ?x7) 
            (one ?x8) 
            (one ?x9) 
            (one ?x10) 
            (one ?x11) 
            (one ?x12) 
            (Q ?x1 ?x2 ?x3 ?x4 ?x5 ?x6 ?x7 ?x8 ?x9 ?x10 ?x11 ?x12) 
        ) ) 
    )
)
(define-fun zero ((?x RefGTyp) ) 
 Space 
    (tospace (and 
            (= nil  ?x  )
            (tobool emp ) 
        )
    )
)
(define-fun succ12rec ((?x1 RefGTyp) (?x2 RefGTyp) (?x3 RefGTyp) (?x4 RefGTyp) (?x5 RefGTyp) (?x6 RefGTyp) (?x7 RefGTyp) (?x8 RefGTyp) (?x9 RefGTyp) (?x10 RefGTyp) (?x11 RefGTyp) (?x12 RefGTyp) (?y1 RefGTyp) (?y2 RefGTyp) (?y3 RefGTyp) (?y4 RefGTyp) (?y5 RefGTyp) (?y6 RefGTyp) (?y7 RefGTyp) (?y8 RefGTyp) (?y9 RefGTyp) (?y10 RefGTyp) (?y11 RefGTyp) (?y12 RefGTyp) ) 
 Space 
    (tospace (or 
            (and 
                (= ?x2 ?y2  )
                (= ?x3 ?y3  )
                (= ?x4 ?y4  )
                (= ?x5 ?y5  )
                (= ?x6 ?y6  )
                (= ?x7 ?y7  )
                (= ?x8 ?y8  )
                (= ?x9 ?y9  )
                (= ?x10 ?y10  )
                (= ?x11 ?y11  )
                (= ?x12 ?y12  )
                (tobool (ssep 
                    (zero ?x1) 
                    (one ?y1) 
                ) ) 
            )
            (tobool (ssep 
                (succ11rec ?x2 ?x3 ?x4 ?x5 ?x6 ?x7 ?x8 ?x9 ?x10 ?x11 ?x12 ?y2 ?y3 ?y4 ?y5 ?y6 ?y7 ?y8 ?y9 ?y10 ?y11 ?y12) 
                (one ?x1) 
                (zero ?y1) 
            ) ) 
        ) 
    )
)
(define-fun succ11rec ((?x1 RefGTyp) (?x2 RefGTyp) (?x3 RefGTyp) (?x4 RefGTyp) (?x5 RefGTyp) (?x6 RefGTyp) (?x7 RefGTyp) (?x8 RefGTyp) (?x9 RefGTyp) (?x10 RefGTyp) (?x11 RefGTyp) (?y1 RefGTyp) (?y2 RefGTyp) (?y3 RefGTyp) (?y4 RefGTyp) (?y5 RefGTyp) (?y6 RefGTyp) (?y7 RefGTyp) (?y8 RefGTyp) (?y9 RefGTyp) (?y10 RefGTyp) (?y11 RefGTyp) ) 
 Space 
    (tospace (or 
            (and 
                (= ?x2 ?y2  )
                (= ?x3 ?y3  )
                (= ?x4 ?y4  )
                (= ?x5 ?y5  )
                (= ?x6 ?y6  )
                (= ?x7 ?y7  )
                (= ?x8 ?y8  )
                (= ?x9 ?y9  )
                (= ?x10 ?y10  )
                (= ?x11 ?y11  )
                (tobool (ssep 
                    (zero ?x1) 
                    (one ?y1) 
                ) ) 
            )
            (tobool (ssep 
                (succ10rec ?x2 ?x3 ?x4 ?x5 ?x6 ?x7 ?x8 ?x9 ?x10 ?x11 ?y2 ?y3 ?y4 ?y5 ?y6 ?y7 ?y8 ?y9 ?y10 ?y11) 
                (one ?x1) 
                (zero ?y1) 
            ) ) 
        ) 
    )
)
(define-fun succ10rec ((?x1 RefGTyp) (?x2 RefGTyp) (?x3 RefGTyp) (?x4 RefGTyp) (?x5 RefGTyp) (?x6 RefGTyp) (?x7 RefGTyp) (?x8 RefGTyp) (?x9 RefGTyp) (?x10 RefGTyp) (?y1 RefGTyp) (?y2 RefGTyp) (?y3 RefGTyp) (?y4 RefGTyp) (?y5 RefGTyp) (?y6 RefGTyp) (?y7 RefGTyp) (?y8 RefGTyp) (?y9 RefGTyp) (?y10 RefGTyp) ) 
 Space 
    (tospace (or 
            (and 
                (= ?x2 ?y2  )
                (= ?x3 ?y3  )
                (= ?x4 ?y4  )
                (= ?x5 ?y5  )
                (= ?x6 ?y6  )
                (= ?x7 ?y7  )
                (= ?x8 ?y8  )
                (= ?x9 ?y9  )
                (= ?x10 ?y10  )
                (tobool (ssep 
                    (zero ?x1) 
                    (one ?y1) 
                ) ) 
            )
            (tobool (ssep 
                (succ9rec ?x2 ?x3 ?x4 ?x5 ?x6 ?x7 ?x8 ?x9 ?x10 ?y2 ?y3 ?y4 ?y5 ?y6 ?y7 ?y8 ?y9 ?y10) 
                (one ?x1) 
                (zero ?y1) 
            ) ) 
        ) 
    )
)
(define-fun succ9rec ((?x1 RefGTyp) (?x2 RefGTyp) (?x3 RefGTyp) (?x4 RefGTyp) (?x5 RefGTyp) (?x6 RefGTyp) (?x7 RefGTyp) (?x8 RefGTyp) (?x9 RefGTyp) (?y1 RefGTyp) (?y2 RefGTyp) (?y3 RefGTyp) (?y4 RefGTyp) (?y5 RefGTyp) (?y6 RefGTyp) (?y7 RefGTyp) (?y8 RefGTyp) (?y9 RefGTyp) ) 
 Space 
    (tospace (or 
            (and 
                (= ?x2 ?y2  )
                (= ?x3 ?y3  )
                (= ?x4 ?y4  )
                (= ?x5 ?y5  )
                (= ?x6 ?y6  )
                (= ?x7 ?y7  )
                (= ?x8 ?y8  )
                (= ?x9 ?y9  )
                (tobool (ssep 
                    (zero ?x1) 
                    (one ?y1) 
                ) ) 
            )
            (tobool (ssep 
                (succ8rec ?x2 ?x3 ?x4 ?x5 ?x6 ?x7 ?x8 ?x9 ?y2 ?y3 ?y4 ?y5 ?y6 ?y7 ?y8 ?y9) 
                (one ?x1) 
                (zero ?y1) 
            ) ) 
        ) 
    )
)
(define-fun succ8rec ((?x1 RefGTyp) (?x2 RefGTyp) (?x3 RefGTyp) (?x4 RefGTyp) (?x5 RefGTyp) (?x6 RefGTyp) (?x7 RefGTyp) (?x8 RefGTyp) (?y1 RefGTyp) (?y2 RefGTyp) (?y3 RefGTyp) (?y4 RefGTyp) (?y5 RefGTyp) (?y6 RefGTyp) (?y7 RefGTyp) (?y8 RefGTyp) ) 
 Space 
    (tospace (or 
            (and 
                (= ?x2 ?y2  )
                (= ?x3 ?y3  )
                (= ?x4 ?y4  )
                (= ?x5 ?y5  )
                (= ?x6 ?y6  )
                (= ?x7 ?y7  )
                (= ?x8 ?y8  )
                (tobool (ssep 
                    (zero ?x1) 
                    (one ?y1) 
                ) ) 
            )
            (tobool (ssep 
                (succ7rec ?x2 ?x3 ?x4 ?x5 ?x6 ?x7 ?x8 ?y2 ?y3 ?y4 ?y5 ?y6 ?y7 ?y8) 
                (one ?x1) 
                (zero ?y1) 
            ) ) 
        ) 
    )
)
(define-fun succ7rec ((?x1 RefGTyp) (?x2 RefGTyp) (?x3 RefGTyp) (?x4 RefGTyp) (?x5 RefGTyp) (?x6 RefGTyp) (?x7 RefGTyp) (?y1 RefGTyp) (?y2 RefGTyp) (?y3 RefGTyp) (?y4 RefGTyp) (?y5 RefGTyp) (?y6 RefGTyp) (?y7 RefGTyp) ) 
 Space 
    (tospace (or 
            (and 
                (= ?x2 ?y2  )
                (= ?x3 ?y3  )
                (= ?x4 ?y4  )
                (= ?x5 ?y5  )
                (= ?x6 ?y6  )
                (= ?x7 ?y7  )
                (tobool (ssep 
                    (zero ?x1) 
                    (one ?y1) 
                ) ) 
            )
            (tobool (ssep 
                (succ6rec ?x2 ?x3 ?x4 ?x5 ?x6 ?x7 ?y2 ?y3 ?y4 ?y5 ?y6 ?y7) 
                (one ?x1) 
                (zero ?y1) 
            ) ) 
        ) 
    )
)
(define-fun succ6rec ((?x1 RefGTyp) (?x2 RefGTyp) (?x3 RefGTyp) (?x4 RefGTyp) (?x5 RefGTyp) (?x6 RefGTyp) (?y1 RefGTyp) (?y2 RefGTyp) (?y3 RefGTyp) (?y4 RefGTyp) (?y5 RefGTyp) (?y6 RefGTyp) ) 
 Space 
    (tospace (or 
            (and 
                (= ?x2 ?y2  )
                (= ?x3 ?y3  )
                (= ?x4 ?y4  )
                (= ?x5 ?y5  )
                (= ?x6 ?y6  )
                (tobool (ssep 
                    (zero ?x1) 
                    (one ?y1) 
                ) ) 
            )
            (tobool (ssep 
                (succ5rec ?x2 ?x3 ?x4 ?x5 ?x6 ?y2 ?y3 ?y4 ?y5 ?y6) 
                (one ?x1) 
                (zero ?y1) 
            ) ) 
        ) 
    )
)
(define-fun succ5rec ((?x1 RefGTyp) (?x2 RefGTyp) (?x3 RefGTyp) (?x4 RefGTyp) (?x5 RefGTyp) (?y1 RefGTyp) (?y2 RefGTyp) (?y3 RefGTyp) (?y4 RefGTyp) (?y5 RefGTyp) ) 
 Space 
    (tospace (or 
            (and 
                (= ?x2 ?y2  )
                (= ?x3 ?y3  )
                (= ?x4 ?y4  )
                (= ?x5 ?y5  )
                (tobool (ssep 
                    (zero ?x1) 
                    (one ?y1) 
                ) ) 
            )
            (tobool (ssep 
                (succ4rec ?x2 ?x3 ?x4 ?x5 ?y2 ?y3 ?y4 ?y5) 
                (one ?x1) 
                (zero ?y1) 
            ) ) 
        ) 
    )
)
(define-fun succ4rec ((?x1 RefGTyp) (?x2 RefGTyp) (?x3 RefGTyp) (?x4 RefGTyp) (?y1 RefGTyp) (?y2 RefGTyp) (?y3 RefGTyp) (?y4 RefGTyp) ) 
 Space 
    (tospace (or 
            (and 
                (= ?x2 ?y2  )
                (= ?x3 ?y3  )
                (= ?x4 ?y4  )
                (tobool (ssep 
                    (zero ?x1) 
                    (one ?y1) 
                ) ) 
            )
            (tobool (ssep 
                (succ3rec ?x2 ?x3 ?x4 ?y2 ?y3 ?y4) 
                (one ?x1) 
                (zero ?y1) 
            ) ) 
        ) 
    )
)
(define-fun succ3rec ((?x1 RefGTyp) (?x2 RefGTyp) (?x3 RefGTyp) (?y1 RefGTyp) (?y2 RefGTyp) (?y3 RefGTyp) ) 
 Space 
    (tospace (or 
            (and 
                (= ?x2 ?y2  )
                (= ?x3 ?y3  )
                (tobool (ssep 
                    (zero ?x1) 
                    (one ?y1) 
                ) ) 
            )
            (tobool (ssep 
                (succ2rec ?x2 ?x3 ?y2 ?y3) 
                (one ?x1) 
                (zero ?y1) 
            ) ) 
        ) 
    )
)
(define-fun succ2rec ((?x1 RefGTyp) (?x2 RefGTyp) (?y1 RefGTyp) (?y2 RefGTyp) ) 
 Space 
    (tospace (or 
            (and 
                (= ?x2 ?y2  )
                (tobool (ssep 
                    (zero ?x1) 
                    (one ?y1) 
                ) ) 
            )
            (tobool (ssep 
                (succ1rec ?x2 ?y2) 
                (one ?x1) 
                (zero ?y1) 
            ) ) 
        ) 
    )
)
(define-fun succ1rec ((?x1 RefGTyp) (?y1 RefGTyp) ) 
 Space 
    (tospace (tobool (ssep 
            (zero ?x1) 
            (one ?y1) 
        ) ) 
    )
)
(check-sat)
(declare-fun x0 () RefGTyp)
(declare-fun x1 () RefGTyp)
(declare-fun x2 () RefGTyp)
(declare-fun x3 () RefGTyp)
(declare-fun x4 () RefGTyp)
(declare-fun x5 () RefGTyp)
(declare-fun x6 () RefGTyp)
(declare-fun x7 () RefGTyp)
(declare-fun x8 () RefGTyp)
(declare-fun x9 () RefGTyp)
(declare-fun x10 () RefGTyp)
(declare-fun x11 () RefGTyp)

(assert (tobool (P x0 x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11) )
 )
(check-sat)
