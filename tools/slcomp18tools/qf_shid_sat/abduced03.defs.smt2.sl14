(set-logic QF_S)
(set-info :source |
  James Brotherston, Carsten Fuhs, Nikos Gorogiannis, and Juan Navarro PÃ©rez. 
  A decision procedure for satisfiability in separation logic with inductive 
  predicates. CSL-LICS, 2014. 
  https://github.com/ngorogiannis/cyclist/releases/tag/CSL-LICS14
|)
(set-info :smt-lib-version 2)
(set-info :category "crafted")
(set-info :status sat)
(declare-sort RefGTyp 0)
;; Declare cell type GTyp
(declare-fun f0 () (Field RefGTyp RefGTyp) )
(declare-fun f1 () (Field RefGTyp RefGTyp) )

;; IGNORE declare-heap 
(define-fun I001 ((?a RefGTyp) ) 
 Space 
    (tospace (exists ((?a00 RefGTyp) ) 
            (and 
                (distinct nil  ?a  )
                (tobool (ssep 
                    (pto ?a
                        (sref (ref f0 ?a00) (ref f1 nil ) ) 
                    ) 
                    (I003 ?a ?a00) 
                ) ) 
            )
        ) 
    )
)
(define-fun ls ((?a RefGTyp) ) 
 Space 
    (tospace (or 
            (and 
                (= nil  ?a  )
                (tobool emp ) 
            )
            (and 
                (distinct nil  ?a  )
                (tobool (I001 ?a) )
            )
        ) 
    )
)
(define-fun I15578 ((?a RefGTyp) (?b RefGTyp) (?c RefGTyp) (?d RefGTyp) (?e RefGTyp) (?f RefGTyp) (?g RefGTyp) (?h RefGTyp) ) 
 Space 
    (tospace (exists ((?a00 RefGTyp) ) 
            (and 
                (distinct nil  ?h  )
                (tobool (ssep 
                    (pto ?h
                        (sref (ref f0 ?a00) (ref f1 nil ) ) 
                    ) 
                    (I82286 ?a ?b ?c ?d ?e ?f ?g ?h ?a00) 
                ) ) 
            )
        ) 
    )
)
(define-fun I82319 ((?a RefGTyp) (?b RefGTyp) (?c RefGTyp) (?d RefGTyp) (?e RefGTyp) (?f RefGTyp) (?g RefGTyp) (?h RefGTyp) (?i RefGTyp) ) 
 Space 
    (tospace (tobool (I15578 ?a ?b ?c ?d ?e ?f ?g ?i) )
    )
)
(define-fun I15579 ((?a RefGTyp) (?b RefGTyp) (?c RefGTyp) (?d RefGTyp) (?e RefGTyp) (?f RefGTyp) (?g RefGTyp) (?h RefGTyp) ) 
 Space 
    (tospace (or 
            (and 
                (= nil  ?a  )
                (tobool emp ) 
            )
            (and 
                (distinct nil  ?a  )
                (tobool (I15611 ?a ?b ?c ?d ?e ?f ?g ?h) )
            )
        ) 
    )
)
(define-fun I82320 ((?a RefGTyp) (?b RefGTyp) (?c RefGTyp) (?d RefGTyp) (?e RefGTyp) (?f RefGTyp) (?g RefGTyp) (?h RefGTyp) (?i RefGTyp) ) 
 Space 
    (tospace (tobool (I15579 ?a ?b ?c ?d ?e ?f ?g ?i) )
    )
)
(define-fun I82286 ((?a RefGTyp) (?b RefGTyp) (?c RefGTyp) (?d RefGTyp) (?e RefGTyp) (?f RefGTyp) (?g RefGTyp) (?h RefGTyp) (?i RefGTyp) ) 
 Space 
    (tospace (or 
            (and 
                (= nil  ?i  )
                (tobool (I82320 ?a ?b ?c ?d ?e ?f ?g ?h ?i) )
            )
            (and 
                (distinct nil  ?i  )
                (tobool (I82319 ?a ?b ?c ?d ?e ?f ?g ?h ?i) )
            )
        ) 
    )
)
(define-fun I50270 ((?a RefGTyp) (?b RefGTyp) (?c RefGTyp) (?d RefGTyp) (?e RefGTyp) (?f RefGTyp) (?g RefGTyp) (?h RefGTyp) (?i RefGTyp) ) 
 Space 
    (tospace (tobool (I15579 ?i ?b ?c ?d ?e ?f ?g ?h) )
    )
)
(define-fun I15611 ((?a RefGTyp) (?b RefGTyp) (?c RefGTyp) (?d RefGTyp) (?e RefGTyp) (?f RefGTyp) (?g RefGTyp) (?h RefGTyp) ) 
 Space 
    (tospace (exists ((?a00 RefGTyp) ) 
            (and 
                (distinct nil  ?a  )
                (tobool (ssep 
                    (pto ?a
                        (sref (ref f0 ?a00) (ref f1 nil ) ) 
                    ) 
                    (I50270 ?a ?b ?c ?d ?e ?f ?g ?h ?a00) 
                ) ) 
            )
        ) 
    )
)
(define-fun I15515 ((?a RefGTyp) (?b RefGTyp) (?c RefGTyp) (?d RefGTyp) (?e RefGTyp) (?f RefGTyp) (?g RefGTyp) (?h RefGTyp) ) 
 Space 
    (tospace (or 
            (and 
                (= nil  ?h  )
                (tobool (I15579 ?a ?b ?c ?d ?e ?f ?g ?h) )
            )
            (and 
                (distinct nil  ?h  )
                (tobool (I15578 ?a ?b ?c ?d ?e ?f ?g ?h) )
            )
        ) 
    )
)
(define-fun I15396 ((?a RefGTyp) (?b RefGTyp) (?c RefGTyp) (?d RefGTyp) (?e RefGTyp) (?f RefGTyp) (?g RefGTyp) ) 
 Space 
    (tospace (exists ((?a00 RefGTyp) ) 
            (and 
                (distinct nil  ?g  )
                (tobool (ssep 
                    (pto ?g
                        (sref (ref f0 ?a00) (ref f1 nil ) ) 
                    ) 
                    (I15515 ?a ?b ?c ?d ?e ?f ?g ?a00) 
                ) ) 
            )
        ) 
    )
)
(define-fun I15397 ((?a RefGTyp) (?b RefGTyp) (?c RefGTyp) (?d RefGTyp) (?e RefGTyp) (?f RefGTyp) (?g RefGTyp) ) 
 Space 
    (tospace (or 
            (and 
                (= ?a ?g  )
                (tobool emp ) 
            )
            (and 
                (distinct ?a ?g  )
                (tobool (I15459 ?a ?b ?c ?d ?e ?f ?g) )
            )
        ) 
    )
)
(define-fun I15471 ((?a RefGTyp) (?b RefGTyp) (?c RefGTyp) (?d RefGTyp) (?e RefGTyp) (?f RefGTyp) (?g RefGTyp) (?h RefGTyp) ) 
 Space 
    (tospace (tobool (I15397 ?h ?b ?c ?d ?e ?f ?g) )
    )
)
(define-fun I15459 ((?a RefGTyp) (?b RefGTyp) (?c RefGTyp) (?d RefGTyp) (?e RefGTyp) (?f RefGTyp) (?g RefGTyp) ) 
 Space 
    (tospace (exists ((?a00 RefGTyp) ) 
            (and 
                (distinct nil  ?a  )
                (tobool (ssep 
                    (pto ?a
                        (sref (ref f0 ?a00) (ref f1 nil ) ) 
                    ) 
                    (I15471 ?a ?b ?c ?d ?e ?f ?g ?a00) 
                ) ) 
            )
        ) 
    )
)
(define-fun I15372 ((?a RefGTyp) (?b RefGTyp) (?c RefGTyp) (?d RefGTyp) (?e RefGTyp) (?f RefGTyp) (?g RefGTyp) ) 
 Space 
    (tospace (or 
            (and 
                (= nil  ?g  )
                (tobool (I15397 ?a ?b ?c ?d ?e ?f ?g) )
            )
            (and 
                (distinct nil  ?g  )
                (tobool (I15396 ?a ?b ?c ?d ?e ?f ?g) )
            )
        ) 
    )
)
(define-fun I2906 ((?a RefGTyp) (?b RefGTyp) (?c RefGTyp) (?d RefGTyp) (?e RefGTyp) (?f RefGTyp) ) 
 Space 
    (tospace (exists ((?a00 RefGTyp) ) 
            (and 
                (distinct nil  ?f  )
                (tobool (ssep 
                    (pto ?f
                        (sref (ref f0 ?a00) (ref f1 nil ) ) 
                    ) 
                    (I15372 ?a ?b ?c ?d ?e ?f ?a00) 
                ) ) 
            )
        ) 
    )
)
(define-fun I2907 ((?a RefGTyp) (?b RefGTyp) (?c RefGTyp) (?d RefGTyp) (?e RefGTyp) (?f RefGTyp) ) 
 Space 
    (tospace (or 
            (and 
                (= ?b ?f  )
                (tobool emp ) 
            )
            (and 
                (distinct ?b ?f  )
                (tobool (I2953 ?a ?b ?c ?d ?e ?f) )
            )
        ) 
    )
)
(define-fun I9735 ((?a RefGTyp) (?b RefGTyp) (?c RefGTyp) (?d RefGTyp) (?e RefGTyp) (?f RefGTyp) (?g RefGTyp) ) 
 Space 
    (tospace (tobool (I2907 ?a ?g ?c ?d ?e ?f) )
    )
)
(define-fun I2953 ((?a RefGTyp) (?b RefGTyp) (?c RefGTyp) (?d RefGTyp) (?e RefGTyp) (?f RefGTyp) ) 
 Space 
    (tospace (exists ((?a00 RefGTyp) ) 
            (and 
                (distinct nil  ?b  )
                (tobool (ssep 
                    (pto ?b
                        (sref (ref f0 ?a00) (ref f1 nil ) ) 
                    ) 
                    (I9735 ?a ?b ?c ?d ?e ?f ?a00) 
                ) ) 
            )
        ) 
    )
)
(define-fun I2886 ((?a RefGTyp) (?b RefGTyp) (?c RefGTyp) (?d RefGTyp) (?e RefGTyp) (?f RefGTyp) ) 
 Space 
    (tospace (or 
            (and 
                (= nil  ?f  )
                (tobool (I2907 ?a ?b ?c ?d ?e ?f) )
            )
            (and 
                (distinct nil  ?f  )
                (tobool (I2906 ?a ?b ?c ?d ?e ?f) )
            )
        ) 
    )
)
(define-fun I482 ((?a RefGTyp) (?b RefGTyp) (?c RefGTyp) (?d RefGTyp) (?e RefGTyp) ) 
 Space 
    (tospace (exists ((?a00 RefGTyp) ) 
            (and 
                (distinct nil  ?e  )
                (tobool (ssep 
                    (pto ?e
                        (sref (ref f0 ?a00) (ref f1 nil ) ) 
                    ) 
                    (I2886 ?a ?b ?c ?d ?e ?a00) 
                ) ) 
            )
        ) 
    )
)
(define-fun I483 ((?a RefGTyp) (?b RefGTyp) (?c RefGTyp) (?d RefGTyp) (?e RefGTyp) ) 
 Space 
    (tospace (or 
            (and 
                (= nil  ?b  )
                (tobool emp ) 
            )
            (and 
                (distinct nil  ?b  )
                (tobool (I510 ?a ?b ?c ?d ?e) )
            )
        ) 
    )
)
(define-fun I1962 ((?a RefGTyp) (?b RefGTyp) (?c RefGTyp) (?d RefGTyp) (?e RefGTyp) (?f RefGTyp) ) 
 Space 
    (tospace (tobool (I483 ?a ?f ?c ?d ?e) )
    )
)
(define-fun I510 ((?a RefGTyp) (?b RefGTyp) (?c RefGTyp) (?d RefGTyp) (?e RefGTyp) ) 
 Space 
    (tospace (exists ((?a00 RefGTyp) ) 
            (and 
                (distinct nil  ?b  )
                (tobool (ssep 
                    (pto ?b
                        (sref (ref f0 ?a00) (ref f1 nil ) ) 
                    ) 
                    (I1962 ?a ?b ?c ?d ?e ?a00) 
                ) ) 
            )
        ) 
    )
)
(define-fun I466 ((?a RefGTyp) (?b RefGTyp) (?c RefGTyp) (?d RefGTyp) (?e RefGTyp) ) 
 Space 
    (tospace (or 
            (and 
                (= nil  ?e  )
                (tobool (I483 ?a ?b ?c ?d ?e) )
            )
            (and 
                (distinct nil  ?e  )
                (tobool (I482 ?a ?b ?c ?d ?e) )
            )
        ) 
    )
)
(define-fun I046 ((?a RefGTyp) (?b RefGTyp) (?c RefGTyp) (?d RefGTyp) ) 
 Space 
    (tospace (exists ((?a00 RefGTyp) ) 
            (and 
                (distinct nil  ?d  )
                (tobool (ssep 
                    (pto ?d
                        (sref (ref f0 ?a00) (ref f1 nil ) ) 
                    ) 
                    (I466 ?a ?b ?c ?d ?a00) 
                ) ) 
            )
        ) 
    )
)
(define-fun I008 ((?a RefGTyp) (?b RefGTyp) ) 
 Space 
    (tospace (tobool emp ) 
    )
)
(define-fun I047 ((?a RefGTyp) (?b RefGTyp) (?c RefGTyp) (?d RefGTyp) ) 
 Space 
    (tospace (tobool (I008 ?c ?d) )
    )
)
(define-fun I034 ((?a RefGTyp) (?b RefGTyp) (?c RefGTyp) (?d RefGTyp) ) 
 Space 
    (tospace (or 
            (and 
                (= nil  ?d  )
                (tobool (I047 ?a ?b ?c ?d) )
            )
            (and 
                (distinct nil  ?d  )
                (tobool (I046 ?a ?b ?c ?d) )
            )
        ) 
    )
)
(define-fun I021 ((?a RefGTyp) (?b RefGTyp) (?c RefGTyp) ) 
 Space 
    (tospace (exists ((?a00 RefGTyp) ) 
            (and 
                (distinct nil  ?c  )
                (tobool (ssep 
                    (pto ?c
                        (sref (ref f0 ?a00) (ref f1 nil ) ) 
                    ) 
                    (I034 ?a ?b ?c ?a00) 
                ) ) 
            )
        ) 
    )
)
(define-fun I022 ((?a RefGTyp) (?b RefGTyp) (?c RefGTyp) ) 
 Space 
    (tospace (tobool (I008 ?b ?c) )
    )
)
(define-fun I013 ((?a RefGTyp) (?b RefGTyp) (?c RefGTyp) ) 
 Space 
    (tospace (or 
            (and 
                (= nil  ?c  )
                (tobool (I022 ?a ?b ?c) )
            )
            (and 
                (distinct nil  ?c  )
                (tobool (I021 ?a ?b ?c) )
            )
        ) 
    )
)
(define-fun I007 ((?a RefGTyp) (?b RefGTyp) ) 
 Space 
    (tospace (exists ((?a00 RefGTyp) ) 
            (and 
                (distinct nil  ?b  )
                (tobool (ssep 
                    (pto ?b
                        (sref (ref f0 ?a00) (ref f1 nil ) ) 
                    ) 
                    (I013 ?a ?b ?a00) 
                ) ) 
            )
        ) 
    )
)
(define-fun I003 ((?a RefGTyp) (?b RefGTyp) ) 
 Space 
    (tospace (or 
            (and 
                (= nil  ?b  )
                (tobool (I008 ?a ?b) )
            )
            (and 
                (distinct nil  ?b  )
                (tobool (I007 ?a ?b) )
            )
        ) 
    )
)
(check-sat)
(declare-fun x0 () RefGTyp)

(assert (tobool (ls x0) )
 )
(check-sat)
