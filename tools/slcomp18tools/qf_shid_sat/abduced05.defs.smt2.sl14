(set-logic QF_S)
(set-info :source |
  James Brotherston, Carsten Fuhs, Nikos Gorogiannis, and Juan Navarro PÃ©rez. 
  A decision procedure for satisfiability in separation logic with inductive 
  predicates. CSL-LICS, 2014. 
  https://github.com/ngorogiannis/cyclist/releases/tag/CSL-LICS14
|)
(set-info :smt-lib-version 2)
(set-info :category "crafted")
(set-info :status sat)
(declare-sort RefGTyp 0)
;; Declare cell type GTyp
(declare-fun f0 () (Field RefGTyp RefGTyp) )
(declare-fun f1 () (Field RefGTyp RefGTyp) )

;; IGNORE declare-heap 
(define-fun I001 ((?a RefGTyp) ) 
 Space 
    (tospace (exists ((?a00 RefGTyp) ) 
            (and 
                (distinct nil  ?a  )
                (tobool (ssep 
                    (pto ?a
                        (sref (ref f0 ?a00) (ref f1 nil ) ) 
                    ) 
                    (I003 ?a ?a00) 
                ) ) 
            )
        ) 
    )
)
(define-fun ls ((?a RefGTyp) ) 
 Space 
    (tospace (or 
            (and 
                (= nil  ?a  )
                (tobool emp ) 
            )
            (and 
                (distinct nil  ?a  )
                (tobool (I001 ?a) )
            )
        ) 
    )
)
(define-fun I32454 ((?a RefGTyp) (?b RefGTyp) (?c RefGTyp) (?d RefGTyp) (?e RefGTyp) (?f RefGTyp) (?g RefGTyp) (?h RefGTyp) ) 
 Space 
    (tospace (or 
            (and 
                (= nil  ?h  )
                (tobool (I32519 ?a ?b ?c ?d ?e ?f ?g ?h) )
            )
            (and 
                (distinct nil  ?h  )
                (tobool (I32518 ?a ?b ?c ?d ?e ?f ?g ?h) )
            )
        ) 
    )
)
(define-fun I172718 ((?a RefGTyp) (?b RefGTyp) (?c RefGTyp) (?d RefGTyp) (?e RefGTyp) (?f RefGTyp) (?g RefGTyp) (?h RefGTyp) (?i RefGTyp) (?j RefGTyp) ) 
 Space 
    (tospace (tobool (I32454 ?a ?b ?c ?d ?e ?f ?g ?j) )
    )
)
(define-fun I172662 ((?a RefGTyp) (?b RefGTyp) (?c RefGTyp) (?d RefGTyp) (?e RefGTyp) (?f RefGTyp) (?g RefGTyp) (?h RefGTyp) (?i RefGTyp) ) 
 Space 
    (tospace (exists ((?a00 RefGTyp) ) 
            (and 
                (distinct nil  ?i  )
                (tobool (ssep 
                    (pto ?i
                        (sref (ref f0 ?a00) (ref f1 nil ) ) 
                    ) 
                    (I172718 ?a ?b ?c ?d ?e ?f ?g ?h ?i ?a00) 
                ) ) 
            )
        ) 
    )
)
(define-fun I32519 ((?a RefGTyp) (?b RefGTyp) (?c RefGTyp) (?d RefGTyp) (?e RefGTyp) (?f RefGTyp) (?g RefGTyp) (?h RefGTyp) ) 
 Space 
    (tospace (or 
            (and 
                (= ?a ?h  )
                (tobool emp ) 
            )
            (and 
                (distinct ?a ?h  )
                (tobool (I32552 ?a ?b ?c ?d ?e ?f ?g ?h) )
            )
        ) 
    )
)
(define-fun I172663 ((?a RefGTyp) (?b RefGTyp) (?c RefGTyp) (?d RefGTyp) (?e RefGTyp) (?f RefGTyp) (?g RefGTyp) (?h RefGTyp) (?i RefGTyp) ) 
 Space 
    (tospace (tobool (I32519 ?a ?b ?c ?d ?e ?f ?g ?i) )
    )
)
(define-fun I172629 ((?a RefGTyp) (?b RefGTyp) (?c RefGTyp) (?d RefGTyp) (?e RefGTyp) (?f RefGTyp) (?g RefGTyp) (?h RefGTyp) (?i RefGTyp) ) 
 Space 
    (tospace (or 
            (and 
                (= nil  ?i  )
                (tobool (I172663 ?a ?b ?c ?d ?e ?f ?g ?h ?i) )
            )
            (and 
                (distinct nil  ?i  )
                (tobool (I172662 ?a ?b ?c ?d ?e ?f ?g ?h ?i) )
            )
        ) 
    )
)
(define-fun I32518 ((?a RefGTyp) (?b RefGTyp) (?c RefGTyp) (?d RefGTyp) (?e RefGTyp) (?f RefGTyp) (?g RefGTyp) (?h RefGTyp) ) 
 Space 
    (tospace (exists ((?a00 RefGTyp) ) 
            (and 
                (distinct nil  ?h  )
                (tobool (ssep 
                    (pto ?h
                        (sref (ref f0 ?a00) (ref f1 nil ) ) 
                    ) 
                    (I172629 ?a ?b ?c ?d ?e ?f ?g ?h ?a00) 
                ) ) 
            )
        ) 
    )
)
(define-fun I57446 ((?a RefGTyp) (?b RefGTyp) (?c RefGTyp) (?d RefGTyp) (?e RefGTyp) (?f RefGTyp) (?g RefGTyp) (?h RefGTyp) (?i RefGTyp) ) 
 Space 
    (tospace (tobool (I32519 ?i ?b ?c ?d ?e ?f ?g ?h) )
    )
)
(define-fun I32552 ((?a RefGTyp) (?b RefGTyp) (?c RefGTyp) (?d RefGTyp) (?e RefGTyp) (?f RefGTyp) (?g RefGTyp) (?h RefGTyp) ) 
 Space 
    (tospace (exists ((?a00 RefGTyp) ) 
            (and 
                (distinct nil  ?a  )
                (tobool (ssep 
                    (pto ?a
                        (sref (ref f0 ?a00) (ref f1 nil ) ) 
                    ) 
                    (I57446 ?a ?b ?c ?d ?e ?f ?g ?h ?a00) 
                ) ) 
            )
        ) 
    )
)
(define-fun I32327 ((?a RefGTyp) (?b RefGTyp) (?c RefGTyp) (?d RefGTyp) (?e RefGTyp) (?f RefGTyp) (?g RefGTyp) ) 
 Space 
    (tospace (exists ((?a00 RefGTyp) ) 
            (and 
                (distinct nil  ?g  )
                (tobool (ssep 
                    (pto ?g
                        (sref (ref f0 ?a00) (ref f1 nil ) ) 
                    ) 
                    (I32454 ?a ?b ?c ?d ?e ?f ?g ?a00) 
                ) ) 
            )
        ) 
    )
)
(define-fun I32328 ((?a RefGTyp) (?b RefGTyp) (?c RefGTyp) (?d RefGTyp) (?e RefGTyp) (?f RefGTyp) (?g RefGTyp) ) 
 Space 
    (tospace (or 
            (and 
                (= ?a ?g  )
                (tobool emp ) 
            )
            (and 
                (distinct ?a ?g  )
                (tobool (I32397 ?a ?b ?c ?d ?e ?f ?g) )
            )
        ) 
    )
)
(define-fun I32409 ((?a RefGTyp) (?b RefGTyp) (?c RefGTyp) (?d RefGTyp) (?e RefGTyp) (?f RefGTyp) (?g RefGTyp) (?h RefGTyp) ) 
 Space 
    (tospace (tobool (I32328 ?h ?b ?c ?d ?e ?f ?g) )
    )
)
(define-fun I32397 ((?a RefGTyp) (?b RefGTyp) (?c RefGTyp) (?d RefGTyp) (?e RefGTyp) (?f RefGTyp) (?g RefGTyp) ) 
 Space 
    (tospace (exists ((?a00 RefGTyp) ) 
            (and 
                (distinct nil  ?a  )
                (tobool (ssep 
                    (pto ?a
                        (sref (ref f0 ?a00) (ref f1 nil ) ) 
                    ) 
                    (I32409 ?a ?b ?c ?d ?e ?f ?g ?a00) 
                ) ) 
            )
        ) 
    )
)
(define-fun I32303 ((?a RefGTyp) (?b RefGTyp) (?c RefGTyp) (?d RefGTyp) (?e RefGTyp) (?f RefGTyp) (?g RefGTyp) ) 
 Space 
    (tospace (or 
            (and 
                (= nil  ?g  )
                (tobool (I32328 ?a ?b ?c ?d ?e ?f ?g) )
            )
            (and 
                (distinct nil  ?g  )
                (tobool (I32327 ?a ?b ?c ?d ?e ?f ?g) )
            )
        ) 
    )
)
(define-fun I5468 ((?a RefGTyp) (?b RefGTyp) (?c RefGTyp) (?d RefGTyp) (?e RefGTyp) (?f RefGTyp) ) 
 Space 
    (tospace (exists ((?a00 RefGTyp) ) 
            (and 
                (distinct nil  ?f  )
                (tobool (ssep 
                    (pto ?f
                        (sref (ref f0 ?a00) (ref f1 nil ) ) 
                    ) 
                    (I32303 ?a ?b ?c ?d ?e ?f ?a00) 
                ) ) 
            )
        ) 
    )
)
(define-fun I5469 ((?a RefGTyp) (?b RefGTyp) (?c RefGTyp) (?d RefGTyp) (?e RefGTyp) (?f RefGTyp) ) 
 Space 
    (tospace (or 
            (and 
                (= nil  ?b  )
                (tobool emp ) 
            )
            (and 
                (distinct nil  ?b  )
                (tobool (I5512 ?a ?b ?c ?d ?e ?f) )
            )
        ) 
    )
)
(define-fun I10900 ((?a RefGTyp) (?b RefGTyp) (?c RefGTyp) (?d RefGTyp) (?e RefGTyp) (?f RefGTyp) (?g RefGTyp) ) 
 Space 
    (tospace (tobool (I5469 ?a ?g ?c ?d ?e ?f) )
    )
)
(define-fun I5512 ((?a RefGTyp) (?b RefGTyp) (?c RefGTyp) (?d RefGTyp) (?e RefGTyp) (?f RefGTyp) ) 
 Space 
    (tospace (exists ((?a00 RefGTyp) ) 
            (and 
                (distinct nil  ?b  )
                (tobool (ssep 
                    (pto ?b
                        (sref (ref f0 ?a00) (ref f1 nil ) ) 
                    ) 
                    (I10900 ?a ?b ?c ?d ?e ?f ?a00) 
                ) ) 
            )
        ) 
    )
)
(define-fun I5448 ((?a RefGTyp) (?b RefGTyp) (?c RefGTyp) (?d RefGTyp) (?e RefGTyp) (?f RefGTyp) ) 
 Space 
    (tospace (or 
            (and 
                (= nil  ?f  )
                (tobool (I5469 ?a ?b ?c ?d ?e ?f) )
            )
            (and 
                (distinct nil  ?f  )
                (tobool (I5468 ?a ?b ?c ?d ?e ?f) )
            )
        ) 
    )
)
(define-fun I122 ((?a RefGTyp) (?b RefGTyp) (?c RefGTyp) (?d RefGTyp) (?e RefGTyp) ) 
 Space 
    (tospace (exists ((?a00 RefGTyp) ) 
            (and 
                (distinct nil  ?e  )
                (tobool (ssep 
                    (pto ?e
                        (sref (ref f0 ?a00) (ref f1 nil ) ) 
                    ) 
                    (I5448 ?a ?b ?c ?d ?e ?a00) 
                ) ) 
            )
        ) 
    )
)
(define-fun I123 ((?a RefGTyp) (?b RefGTyp) (?c RefGTyp) (?d RefGTyp) (?e RefGTyp) ) 
 Space 
    (tospace (or 
            (and 
                (= ?b ?e  )
                (tobool emp ) 
            )
            (and 
                (distinct ?b ?e  )
                (tobool (I943 ?a ?b ?c ?d ?e) )
            )
        ) 
    )
)
(define-fun I2134 ((?a RefGTyp) (?b RefGTyp) (?c RefGTyp) (?d RefGTyp) (?e RefGTyp) (?f RefGTyp) ) 
 Space 
    (tospace (tobool (I123 ?a ?f ?c ?d ?e) )
    )
)
(define-fun I943 ((?a RefGTyp) (?b RefGTyp) (?c RefGTyp) (?d RefGTyp) (?e RefGTyp) ) 
 Space 
    (tospace (exists ((?a00 RefGTyp) ) 
            (and 
                (distinct nil  ?b  )
                (tobool (ssep 
                    (pto ?b
                        (sref (ref f0 ?a00) (ref f1 nil ) ) 
                    ) 
                    (I2134 ?a ?b ?c ?d ?e ?a00) 
                ) ) 
            )
        ) 
    )
)
(define-fun I106 ((?a RefGTyp) (?b RefGTyp) (?c RefGTyp) (?d RefGTyp) (?e RefGTyp) ) 
 Space 
    (tospace (or 
            (and 
                (= nil  ?e  )
                (tobool (I123 ?a ?b ?c ?d ?e) )
            )
            (and 
                (distinct nil  ?e  )
                (tobool (I122 ?a ?b ?c ?d ?e) )
            )
        ) 
    )
)
(define-fun I046 ((?a RefGTyp) (?b RefGTyp) (?c RefGTyp) (?d RefGTyp) ) 
 Space 
    (tospace (exists ((?a00 RefGTyp) ) 
            (and 
                (distinct nil  ?d  )
                (tobool (ssep 
                    (pto ?d
                        (sref (ref f0 ?a00) (ref f1 nil ) ) 
                    ) 
                    (I106 ?a ?b ?c ?d ?a00) 
                ) ) 
            )
        ) 
    )
)
(define-fun I047 ((?a RefGTyp) (?b RefGTyp) (?c RefGTyp) (?d RefGTyp) ) 
 Space 
    (tospace (or 
            (and 
                (= ?a ?d  )
                (tobool emp ) 
            )
            (and 
                (distinct ?a ?d  )
                (tobool (I056 ?a ?b ?c ?d) )
            )
        ) 
    )
)
(define-fun I060 ((?a RefGTyp) (?b RefGTyp) (?c RefGTyp) (?d RefGTyp) (?e RefGTyp) ) 
 Space 
    (tospace (tobool (I047 ?e ?b ?c ?d) )
    )
)
(define-fun I056 ((?a RefGTyp) (?b RefGTyp) (?c RefGTyp) (?d RefGTyp) ) 
 Space 
    (tospace (exists ((?a00 RefGTyp) ) 
            (and 
                (distinct nil  ?a  )
                (tobool (ssep 
                    (pto ?a
                        (sref (ref f0 ?a00) (ref f1 nil ) ) 
                    ) 
                    (I060 ?a ?b ?c ?d ?a00) 
                ) ) 
            )
        ) 
    )
)
(define-fun I034 ((?a RefGTyp) (?b RefGTyp) (?c RefGTyp) (?d RefGTyp) ) 
 Space 
    (tospace (or 
            (and 
                (= nil  ?d  )
                (tobool (I047 ?a ?b ?c ?d) )
            )
            (and 
                (distinct nil  ?d  )
                (tobool (I046 ?a ?b ?c ?d) )
            )
        ) 
    )
)
(define-fun I021 ((?a RefGTyp) (?b RefGTyp) (?c RefGTyp) ) 
 Space 
    (tospace (exists ((?a00 RefGTyp) ) 
            (and 
                (distinct nil  ?c  )
                (tobool (ssep 
                    (pto ?c
                        (sref (ref f0 ?a00) (ref f1 nil ) ) 
                    ) 
                    (I034 ?a ?b ?c ?a00) 
                ) ) 
            )
        ) 
    )
)
(define-fun I008 ((?a RefGTyp) (?b RefGTyp) ) 
 Space 
    (tospace (tobool emp ) 
    )
)
(define-fun I022 ((?a RefGTyp) (?b RefGTyp) (?c RefGTyp) ) 
 Space 
    (tospace (tobool (I008 ?b ?c) )
    )
)
(define-fun I013 ((?a RefGTyp) (?b RefGTyp) (?c RefGTyp) ) 
 Space 
    (tospace (or 
            (and 
                (= nil  ?c  )
                (tobool (I022 ?a ?b ?c) )
            )
            (and 
                (distinct nil  ?c  )
                (tobool (I021 ?a ?b ?c) )
            )
        ) 
    )
)
(define-fun I007 ((?a RefGTyp) (?b RefGTyp) ) 
 Space 
    (tospace (exists ((?a00 RefGTyp) ) 
            (and 
                (distinct nil  ?b  )
                (tobool (ssep 
                    (pto ?b
                        (sref (ref f0 ?a00) (ref f1 nil ) ) 
                    ) 
                    (I013 ?a ?b ?a00) 
                ) ) 
            )
        ) 
    )
)
(define-fun I003 ((?a RefGTyp) (?b RefGTyp) ) 
 Space 
    (tospace (or 
            (and 
                (= nil  ?b  )
                (tobool (I008 ?a ?b) )
            )
            (and 
                (distinct nil  ?b  )
                (tobool (I007 ?a ?b) )
            )
        ) 
    )
)
(check-sat)
(declare-fun x0 () RefGTyp)

(assert (tobool (ls x0) )
 )
(check-sat)
