(set-logic QF_S)
(set-info :source |
Quang Loc Le Q.Le@tees.ac.uk
|)
(set-info :smt-lib-version 2)
(set-info :category "crafted")
(set-info :status unsat)
(set-info :version "2018-06-15")
(declare-sort RefDll_t 0)
;; Declare cell type Dll_t
(declare-fun next () (Field RefDll_t RefDll_t) )
(declare-fun prev () (Field RefDll_t RefDll_t) )

;; IGNORE declare-heap 
(define-fun dll ((?fr RefDll_t) (?bk RefDll_t) (?pr RefDll_t) (?nx RefDll_t) ) 
        Space 
    (tospace (or 
            (and 
                (= ?fr ?nx  )
                (= ?bk ?pr  )
                (tobool emp ) 
            )
            (exists ((?u RefDll_t) ) 
                (and 
                    (distinct ?fr ?nx  )
                    (distinct ?bk ?pr  )
                    (tobool (ssep 
                        (pto ?fr
                            (sref (ref next ?u) (ref prev ?pr) ) 
                        ) 
                        (dll ?u ?bk ?fr ?nx) 
                    ) ) 
                )
            ) 
        ) 
    )
)
(check-sat)
(declare-fun x_emp () RefDll_t)
(declare-fun y_emp () RefDll_t)
(declare-fun z_emp () RefDll_t)

(assert (and 
        (distinct x_emp z_emp  )
        (distinct y_emp z_emp  )
        (distinct x_emp nil   )
        (distinct y_emp nil   )
        (distinct x_emp y_emp  )
        (tobool (ssep 
            (pto x_emp
                (sref (ref next y_emp) (ref prev nil ) ) 
            ) 
            (pto y_emp
                (sref (ref next z_emp) (ref prev x_emp) ) 
            ) 
        ) ) 
    )
 )

(assert (not (tobool (dll x_emp y_emp nil  z_emp) ) )
 )
(check-sat)
