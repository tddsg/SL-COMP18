(set-logic QF_S)
(set-info :source |
  Zhilin Wu.
  COMPSPEN benchmark.
|)
(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :status sat)
(set-info :version "2018-06-21")
(declare-sort RefDll_t 0)
;; Declare cell type Dll_t
(declare-fun next () (Field RefDll_t RefDll_t) )
(declare-fun prev () (Field RefDll_t RefDll_t) )

;; IGNORE declare-heap 
(define-fun ldll ((?E RefDll_t) (?P RefDll_t) (?len1 Int) (?F RefDll_t) (?L RefDll_t) (?len2 Int) ) 
        Space 
    (tospace (or 
            (and 
                (= ?E ?F  )
                (= ?P ?L  )
                (= ?len1 ?len2  )
                (tobool emp ) 
            )
            (exists ((?u RefDll_t) (?len3 Int) ) 
                (and 
                    (= ?len1 (+ ?len3 1)   )
                    (tobool (ssep 
                        (pto ?E
                            (sref (ref next ?u) (ref prev ?P) ) 
                        ) 
                        (ldll ?u ?E ?len3 ?F ?L ?len2) 
                    ) ) 
                )
            ) 
        ) 
    )
)
(check-sat)
(declare-fun E1 () RefDll_t)
(declare-fun E2 () RefDll_t)
(declare-fun E3 () RefDll_t)
(declare-fun E4 () RefDll_t)
(declare-fun E5 () RefDll_t)
(declare-fun E6 () RefDll_t)
(declare-fun E1_prime () RefDll_t)
(declare-fun E2_prime () RefDll_t)
(declare-fun E3_prime () RefDll_t)
(declare-fun E4_prime () RefDll_t)
(declare-fun E5_prime () RefDll_t)
(declare-fun E6_prime () RefDll_t)
(declare-fun x1 () Int)
(declare-fun x2 () Int)
(declare-fun x3 () Int)
(declare-fun x4 () Int)
(declare-fun x5 () Int)
(declare-fun x6 () Int)
(declare-fun x3_prime () Int)
(declare-fun x4_prime () Int)
(declare-fun x5_prime () Int)

(assert (and 
        (= E2 E4  )
        (= E3 E5  )
        (tobool (ssep 
            (ldll E1 E1_prime x1 E3 E3_prime x3) 
            (ldll E2 E2_prime x2 E4 E4_prime x4) 
            (ldll E3 E3_prime x3 E4 E4_prime x4) 
            (ldll E4 E4_prime x4_prime E3 E3_prime x3_prime) 
            (ldll E3 E3_prime x3 E5 E5_prime x5) 
            (ldll E5 E5_prime x5_prime E3 E3_prime x3_prime) 
            (ldll E4 E4_prime x4 E6 E6_prime x6) 
        ) ) 
    )
 )

(assert (not (tobool (ldll E1 E1_prime x1 E6 E6_prime x6) ) )
 )
(check-sat)
