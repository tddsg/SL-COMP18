(set-logic QF_S)
(set-info :source |
A. Rybalchenko and J. A. Navarro Perez.
[Separation Logic + Superposition Calculus = Heap Theorem Prover]
[PLDI 2011]
http://navarroj.com/research/papers.html#pldi11
|)
(set-info :smt-lib-version 2)
(set-info :category "random")
(set-info :status sat)
(set-info :version "2014-05-28")
(declare-sort RefSll_t 0)
;; Declare cell type Sll_t
(declare-fun next () (Field RefSll_t RefSll_t) )

;; IGNORE declare-heap 
(define-fun ls ((?in RefSll_t) (?out RefSll_t) ) 
        Space 
    (tospace (or 
            (and 
                (= ?in ?out  )
                (tobool emp ) 
            )
            (exists ((?u RefSll_t) ) 
                (and 
                    (distinct ?in ?out  )
                    (tobool (ssep 
                        (pto ?in
                            (ref next ?u) 
                        ) 
                        (ls ?u ?out) 
                    ) ) 
                )
            ) 
        ) 
    )
)
(check-sat)
(declare-fun x0 () RefSll_t)
(declare-fun x1 () RefSll_t)
(declare-fun x2 () RefSll_t)
(declare-fun x3 () RefSll_t)
(declare-fun x4 () RefSll_t)
(declare-fun x5 () RefSll_t)
(declare-fun x6 () RefSll_t)
(declare-fun x7 () RefSll_t)
(declare-fun x8 () RefSll_t)
(declare-fun x9 () RefSll_t)
(declare-fun x10 () RefSll_t)
(declare-fun x11 () RefSll_t)
(declare-fun x12 () RefSll_t)
(declare-fun x13 () RefSll_t)
(declare-fun x14 () RefSll_t)
(declare-fun x15 () RefSll_t)

(assert (and 
        (= nil  nil   )
        (distinct x6 x9  )
        (distinct x9 x11  )
        (distinct x2 x8  )
        (distinct x8 x10  )
        (distinct x1 x3  )
        (distinct x1 x7  )
        (distinct x4 x10  )
        (distinct x10 x11  )
        (distinct x5 x11  )
        (tobool (ssep 
            (ls x5 x8) 
            (ls x1 x9) 
            (ls x8 x10) 
            (ls x2 x9) 
            (ls x2 x10) 
            (ls x2 x4) 
            (ls x7 x5) 
            (ls x7 x4) 
            (ls x3 x9) 
            (ls x6 x9) 
        ) ) 
    )
 )
(check-sat)
