(set-logic QF_BSL)
(set-info :source | CVC4 - Andrew Reynolds |)
(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :status sat)


(declare-sort Loc 0)
(declare-const c0 Loc)
(declare-datatypes (
        (Node 0)
        ) (
        ((node (data Loc) (next Loc)))
        )
)
(declare-const data0 Node)
(declare-heap (Loc Node))
(declare-const loc0 Loc)


(declare-const w Loc)
(declare-const u1 Loc)
(declare-const u2 Loc)
(declare-const u3 Loc)
(declare-const u4 Loc)
(declare-const u5 Loc)
(declare-const u6 Loc)
(declare-const u7 Loc)

(declare-const nx1 Loc)
(declare-const nx2 Loc)
(declare-const nx3 Loc)
(declare-const nx4 Loc)
(declare-const nx5 Loc)
(declare-const nx6 Loc)
(declare-const nx7 Loc)
(declare-const nx8 Loc)
(declare-const nx9 Loc)
(declare-const nx10 Loc)
(declare-const nx11 Loc)
(declare-const nx12 Loc)
(declare-const nx13 Loc)
(declare-const nx14 Loc)
(declare-const nx15 Loc)
(declare-const nx16 Loc)
(declare-const dt1 Loc)
(declare-const dt3 Loc)
(declare-const dt5 Loc)
(declare-const dt7 Loc)
(declare-const dt9 Loc)
(declare-const dt11 Loc)
(declare-const dt13 Loc)
(declare-const dt15 Loc)
(declare-const node1 Node)
(declare-const node2 Node)
(declare-const node3 Node)
(declare-const node4 Node)
(declare-const node5 Node)
(declare-const node6 Node)
(declare-const node7 Node)
(declare-const node8 Node)

;------- f -------
(assert (= nx1 (as nil Loc)))
(assert (= nx2 (as nil Loc)))
(assert (= nx3 u7))
(assert (= nx4 u7))
(assert (= nx5 u6))
(assert (= nx6 u6))
(assert (= nx7 u5))
(assert (= nx8 u5))
(assert (= nx9 u4))
(assert (= nx10 u4))
(assert (= nx11 u3))
(assert (= nx12 u3))
(assert (= nx13 u2))
(assert (= nx14 u2))
(assert (= nx15 u1))
(assert (= nx16 u1))
(assert (= dt1 c0))
(assert (= dt3 c0))
(assert (= dt5 c0))
(assert (= dt7 c0))
(assert (= dt9 c0))
(assert (= dt11 c0))
(assert (= dt13 c0))
(assert (= dt15 c0))
(assert (= node1 (node c0 (as nil Loc))))
(assert (= node2 (node c0 u7)))
(assert (= node3 (node c0 u6)))
(assert (= node4 (node c0 u5)))
(assert (= node5 (node c0 u4)))
(assert (= node6 (node c0 u3)))
(assert (= node7 (node c0 u2)))
(assert (= node8 (node c0 u1)))
;-----------------

(assert (sep (pto w (node c0 u1)) (pto u1 (node c0 u2)) (pto u2 (node c0 u3)) (pto u3 (node c0 u4)) (pto u4 (node c0 u5)) (pto u5 (node c0 u6)) (pto u6 (node c0 u7)) (pto u7 (node c0 (as nil Loc)))))

(assert (not (and (sep (pto w (node c0 nx16)) true) (and (sep (and (sep (pto nx15 (node c0 nx14)) true) (and (sep (and (sep (pto nx13 (node c0 nx12)) true) (and (sep (and (sep (pto nx11 (node c0 nx10)) true) (and (sep (and (sep (pto nx9 (node c0 nx8)) true) (and (sep (and (sep (pto nx7 (node c0 nx6)) true) (and (sep (and (sep (pto nx5 (node c0 nx4)) true) (and (sep (and (sep (pto nx3 (node c0 nx2)) true) (and (sep (and (_ emp Loc Node) (= nx1 (as nil Loc))) (pto nx3 node1)) (sep (pto nx3 (node dt1 nx1)) true))) (pto nx5 node2)) (sep (pto nx5 (node dt3 nx3)) true))) (pto nx7 node3)) (sep (pto nx7 (node dt5 nx5)) true))) (pto nx9 node4)) (sep (pto nx9 (node dt7 nx7)) true))) (pto nx11 node5)) (sep (pto nx11 (node dt9 nx9)) true))) (pto nx13 node6)) (sep (pto nx13 (node dt11 nx11)) true))) (pto nx15 node7)) (sep (pto nx15 (node dt13 nx13)) true))) (pto w node8)) (sep (pto w (node dt15 nx15)) true)))))

(check-sat)
;(get-model)
