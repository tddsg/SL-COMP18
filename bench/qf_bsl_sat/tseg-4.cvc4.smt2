(set-logic QF_BSL)
(set-info :source | CVC4 - Andrew Reynolds |)
(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :status sat)


(declare-sort Loc 0)
;
(declare-datatypes (
                (Node 0)
                ) (
                ( (node (left Loc) (right Loc)))
                )
)
(declare-heap (Loc Node))
(declare-const loc0 Loc)
(declare-const data0 Node)

(declare-const root Loc)
(declare-const end Loc)
(declare-const yl Loc)
(declare-const yr Loc)
(declare-const yl0 Loc)
(declare-const yr0 Loc)
(declare-const yl00 Loc)
(declare-const yr00 Loc)
(declare-const yl000 Loc)
(declare-const yr000 Loc)
(declare-const yl001 Loc)
(declare-const yr001 Loc)
(declare-const yl01 Loc)
(declare-const yr01 Loc)
(declare-const yl010 Loc)
(declare-const yr010 Loc)
(declare-const yl011 Loc)
(declare-const yr011 Loc)
(declare-const yl1 Loc)
(declare-const yr1 Loc)
(declare-const yl10 Loc)
(declare-const yr10 Loc)
(declare-const yl100 Loc)
(declare-const yr100 Loc)
(declare-const yl101 Loc)
(declare-const yr101 Loc)
(declare-const yl11 Loc)
(declare-const yr11 Loc)
(declare-const yl110 Loc)
(declare-const yr110 Loc)
(declare-const yl111 Loc)
(declare-const yr111 Loc)
(declare-const xl0 Loc)
(declare-const xr0 Loc)
(declare-const xl00 Loc)
(declare-const xr00 Loc)
(declare-const xl000 Loc)
(declare-const xr000 Loc)
(declare-const xl001 Loc)
(declare-const xr001 Loc)
(declare-const xl01 Loc)
(declare-const xr01 Loc)
(declare-const xl010 Loc)
(declare-const xr010 Loc)
(declare-const xl011 Loc)
(declare-const xr011 Loc)
(declare-const xl1 Loc)
(declare-const xr1 Loc)
(declare-const xl10 Loc)
(declare-const xr10 Loc)
(declare-const xl100 Loc)
(declare-const xr100 Loc)
(declare-const xl101 Loc)
(declare-const xr101 Loc)
(declare-const xl11 Loc)
(declare-const xr11 Loc)
(declare-const xl110 Loc)
(declare-const xr110 Loc)
(declare-const xl111 Loc)
(declare-const xr111 Loc)
(declare-const ul Loc)
(declare-const ur Loc)
(declare-const ul0 Loc)
(declare-const ur0 Loc)
(declare-const ul00 Loc)
(declare-const ur00 Loc)
(declare-const ul000 Loc)
(declare-const ur000 Loc)
(declare-const ul001 Loc)
(declare-const ur001 Loc)
(declare-const ul01 Loc)
(declare-const ur01 Loc)
(declare-const ul010 Loc)
(declare-const ur010 Loc)
(declare-const ul011 Loc)
(declare-const ur011 Loc)
(declare-const ul1 Loc)
(declare-const ur1 Loc)
(declare-const ul10 Loc)
(declare-const ur10 Loc)
(declare-const ul100 Loc)
(declare-const ur100 Loc)
(declare-const ul101 Loc)
(declare-const ur101 Loc)
(declare-const ul11 Loc)
(declare-const ur11 Loc)
(declare-const ul110 Loc)
(declare-const ur110 Loc)
(declare-const ul111 Loc)
(declare-const ur111 Loc)
(declare-const tl0 Loc)
(declare-const tr0 Loc)
(declare-const tl00 Loc)
(declare-const tr00 Loc)
(declare-const tl000 Loc)
(declare-const tr000 Loc)
(declare-const tl001 Loc)
(declare-const tr001 Loc)
(declare-const tl01 Loc)
(declare-const tr01 Loc)
(declare-const tl010 Loc)
(declare-const tr010 Loc)
(declare-const tl011 Loc)
(declare-const tr011 Loc)
(declare-const tl1 Loc)
(declare-const tr1 Loc)
(declare-const tl10 Loc)
(declare-const tr10 Loc)
(declare-const tl100 Loc)
(declare-const tr100 Loc)
(declare-const tl101 Loc)
(declare-const tr101 Loc)
(declare-const tl11 Loc)
(declare-const tr11 Loc)
(declare-const tl110 Loc)
(declare-const tr110 Loc)
(declare-const tl111 Loc)
(declare-const tr111 Loc)

(define-fun acyc_tseg4 ((y Loc) (z Loc)) Bool (or (and (= y z) (_ emp Loc Node)) (and (distinct y z) (sep (pto y (node yl yr)) (or (and (= yl z) (_ emp Loc Node)) (and (distinct yl z) (sep (pto yl (node yl0 yr0)) (or (and (= yl0 z) (_ emp Loc Node)) (and (distinct yl0 z) (sep (pto yl0 (node yl00 yr00)) (or (and (= yl00 z) (_ emp Loc Node)) (and (distinct yl00 z) (sep (pto yl00 (node yl000 yr000)) (and (= yl000 z) (_ emp Loc Node)) (and (= yr000 (as nil Loc)) (_ emp Loc Node)))) (and (distinct yl00 z) (sep (pto yl00 (node yl000 yr000)) (and (= yl000 (as nil Loc)) (_ emp Loc Node)) (and (= yr000 z) (_ emp Loc Node))))) (or (and (= yr00 (as nil Loc)) (_ emp Loc Node)) (and (distinct yr00 z) (sep (pto yr00 (node xl001 xr001)) (and (= xl001 (as nil Loc)) (_ emp Loc Node)) (and (= xr001 (as nil Loc)) (_ emp Loc Node))))))) (and (distinct yl0 z) (sep (pto yl0 (node yl00 yr00)) (or (and (= yl00 (as nil Loc)) (_ emp Loc Node)) (and (distinct yl00 z) (sep (pto yl00 (node xl000 xr000)) (and (= xl000 (as nil Loc)) (_ emp Loc Node)) (and (= xr000 (as nil Loc)) (_ emp Loc Node))))) (or (and (= yr00 z) (_ emp Loc Node)) (and (distinct yr00 z) (sep (pto yr00 (node yl001 yr001)) (and (= yl001 z) (_ emp Loc Node)) (and (= yr001 (as nil Loc)) (_ emp Loc Node)))) (and (distinct yr00 z) (sep (pto yr00 (node yl001 yr001)) (and (= yl001 (as nil Loc)) (_ emp Loc Node)) (and (= yr001 z) (_ emp Loc Node)))))))) (or (and (= yr0 (as nil Loc)) (_ emp Loc Node)) (and (distinct yr0 z) (sep (pto yr0 (node xl01 xr01)) (or (and (= xl01 (as nil Loc)) (_ emp Loc Node)) (and (distinct xl01 z) (sep (pto xl01 (node xl010 xr010)) (and (= xl010 (as nil Loc)) (_ emp Loc Node)) (and (= xr010 (as nil Loc)) (_ emp Loc Node))))) (or (and (= xr01 (as nil Loc)) (_ emp Loc Node)) (and (distinct xr01 z) (sep (pto xr01 (node xl011 xr011)) (and (= xl011 (as nil Loc)) (_ emp Loc Node)) (and (= xr011 (as nil Loc)) (_ emp Loc Node)))))))))) (and (distinct yl z) (sep (pto yl (node yl0 yr0)) (or (and (= yl0 (as nil Loc)) (_ emp Loc Node)) (and (distinct yl0 z) (sep (pto yl0 (node xl00 xr00)) (or (and (= xl00 (as nil Loc)) (_ emp Loc Node)) (and (distinct xl00 z) (sep (pto xl00 (node xl000 xr000)) (and (= xl000 (as nil Loc)) (_ emp Loc Node)) (and (= xr000 (as nil Loc)) (_ emp Loc Node))))) (or (and (= xr00 (as nil Loc)) (_ emp Loc Node)) (and (distinct xr00 z) (sep (pto xr00 (node xl001 xr001)) (and (= xl001 (as nil Loc)) (_ emp Loc Node)) (and (= xr001 (as nil Loc)) (_ emp Loc Node)))))))) (or (and (= yr0 z) (_ emp Loc Node)) (and (distinct yr0 z) (sep (pto yr0 (node yl01 yr01)) (or (and (= yl01 z) (_ emp Loc Node)) (and (distinct yl01 z) (sep (pto yl01 (node yl010 yr010)) (and (= yl010 z) (_ emp Loc Node)) (and (= yr010 (as nil Loc)) (_ emp Loc Node)))) (and (distinct yl01 z) (sep (pto yl01 (node yl010 yr010)) (and (= yl010 (as nil Loc)) (_ emp Loc Node)) (and (= yr010 z) (_ emp Loc Node))))) (or (and (= yr01 (as nil Loc)) (_ emp Loc Node)) (and (distinct yr01 z) (sep (pto yr01 (node xl011 xr011)) (and (= xl011 (as nil Loc)) (_ emp Loc Node)) (and (= xr011 (as nil Loc)) (_ emp Loc Node))))))) (and (distinct yr0 z) (sep (pto yr0 (node yl01 yr01)) (or (and (= yl01 (as nil Loc)) (_ emp Loc Node)) (and (distinct yl01 z) (sep (pto yl01 (node xl010 xr010)) (and (= xl010 (as nil Loc)) (_ emp Loc Node)) (and (= xr010 (as nil Loc)) (_ emp Loc Node))))) (or (and (= yr01 z) (_ emp Loc Node)) (and (distinct yr01 z) (sep (pto yr01 (node yl011 yr011)) (and (= yl011 z) (_ emp Loc Node)) (and (= yr011 (as nil Loc)) (_ emp Loc Node)))) (and (distinct yr01 z) (sep (pto yr01 (node yl011 yr011)) (and (= yl011 (as nil Loc)) (_ emp Loc Node)) (and (= yr011 z) (_ emp Loc Node))))))))))) (or (and (= yr (as nil Loc)) (_ emp Loc Node)) (and (distinct yr z) (sep (pto yr (node xl1 xr1)) (or (and (= xl1 (as nil Loc)) (_ emp Loc Node)) (and (distinct xl1 z) (sep (pto xl1 (node xl10 xr10)) (or (and (= xl10 (as nil Loc)) (_ emp Loc Node)) (and (distinct xl10 z) (sep (pto xl10 (node xl100 xr100)) (and (= xl100 (as nil Loc)) (_ emp Loc Node)) (and (= xr100 (as nil Loc)) (_ emp Loc Node))))) (or (and (= xr10 (as nil Loc)) (_ emp Loc Node)) (and (distinct xr10 z) (sep (pto xr10 (node xl101 xr101)) (and (= xl101 (as nil Loc)) (_ emp Loc Node)) (and (= xr101 (as nil Loc)) (_ emp Loc Node)))))))) (or (and (= xr1 (as nil Loc)) (_ emp Loc Node)) (and (distinct xr1 z) (sep (pto xr1 (node xl11 xr11)) (or (and (= xl11 (as nil Loc)) (_ emp Loc Node)) (and (distinct xl11 z) (sep (pto xl11 (node xl110 xr110)) (and (= xl110 (as nil Loc)) (_ emp Loc Node)) (and (= xr110 (as nil Loc)) (_ emp Loc Node))))) (or (and (= xr11 (as nil Loc)) (_ emp Loc Node)) (and (distinct xr11 z) (sep (pto xr11 (node xl111 xr111)) (and (= xl111 (as nil Loc)) (_ emp Loc Node)) (and (= xr111 (as nil Loc)) (_ emp Loc Node))))))))))))) (and (distinct y z) (sep (pto y (node yl yr)) (or (and (= yl (as nil Loc)) (_ emp Loc Node)) (and (distinct yl z) (sep (pto yl (node xl0 xr0)) (or (and (= xl0 (as nil Loc)) (_ emp Loc Node)) (and (distinct xl0 z) (sep (pto xl0 (node xl00 xr00)) (or (and (= xl00 (as nil Loc)) (_ emp Loc Node)) (and (distinct xl00 z) (sep (pto xl00 (node xl000 xr000)) (and (= xl000 (as nil Loc)) (_ emp Loc Node)) (and (= xr000 (as nil Loc)) (_ emp Loc Node))))) (or (and (= xr00 (as nil Loc)) (_ emp Loc Node)) (and (distinct xr00 z) (sep (pto xr00 (node xl001 xr001)) (and (= xl001 (as nil Loc)) (_ emp Loc Node)) (and (= xr001 (as nil Loc)) (_ emp Loc Node)))))))) (or (and (= xr0 (as nil Loc)) (_ emp Loc Node)) (and (distinct xr0 z) (sep (pto xr0 (node xl01 xr01)) (or (and (= xl01 (as nil Loc)) (_ emp Loc Node)) (and (distinct xl01 z) (sep (pto xl01 (node xl010 xr010)) (and (= xl010 (as nil Loc)) (_ emp Loc Node)) (and (= xr010 (as nil Loc)) (_ emp Loc Node))))) (or (and (= xr01 (as nil Loc)) (_ emp Loc Node)) (and (distinct xr01 z) (sep (pto xr01 (node xl011 xr011)) (and (= xl011 (as nil Loc)) (_ emp Loc Node)) (and (= xr011 (as nil Loc)) (_ emp Loc Node))))))))))) (or (and (= yr z) (_ emp Loc Node)) (and (distinct yr z) (sep (pto yr (node yl1 yr1)) (or (and (= yl1 z) (_ emp Loc Node)) (and (distinct yl1 z) (sep (pto yl1 (node yl10 yr10)) (or (and (= yl10 z) (_ emp Loc Node)) (and (distinct yl10 z) (sep (pto yl10 (node yl100 yr100)) (and (= yl100 z) (_ emp Loc Node)) (and (= yr100 (as nil Loc)) (_ emp Loc Node)))) (and (distinct yl10 z) (sep (pto yl10 (node yl100 yr100)) (and (= yl100 (as nil Loc)) (_ emp Loc Node)) (and (= yr100 z) (_ emp Loc Node))))) (or (and (= yr10 (as nil Loc)) (_ emp Loc Node)) (and (distinct yr10 z) (sep (pto yr10 (node xl101 xr101)) (and (= xl101 (as nil Loc)) (_ emp Loc Node)) (and (= xr101 (as nil Loc)) (_ emp Loc Node))))))) (and (distinct yl1 z) (sep (pto yl1 (node yl10 yr10)) (or (and (= yl10 (as nil Loc)) (_ emp Loc Node)) (and (distinct yl10 z) (sep (pto yl10 (node xl100 xr100)) (and (= xl100 (as nil Loc)) (_ emp Loc Node)) (and (= xr100 (as nil Loc)) (_ emp Loc Node))))) (or (and (= yr10 z) (_ emp Loc Node)) (and (distinct yr10 z) (sep (pto yr10 (node yl101 yr101)) (and (= yl101 z) (_ emp Loc Node)) (and (= yr101 (as nil Loc)) (_ emp Loc Node)))) (and (distinct yr10 z) (sep (pto yr10 (node yl101 yr101)) (and (= yl101 (as nil Loc)) (_ emp Loc Node)) (and (= yr101 z) (_ emp Loc Node)))))))) (or (and (= yr1 (as nil Loc)) (_ emp Loc Node)) (and (distinct yr1 z) (sep (pto yr1 (node xl11 xr11)) (or (and (= xl11 (as nil Loc)) (_ emp Loc Node)) (and (distinct xl11 z) (sep (pto xl11 (node xl110 xr110)) (and (= xl110 (as nil Loc)) (_ emp Loc Node)) (and (= xr110 (as nil Loc)) (_ emp Loc Node))))) (or (and (= xr11 (as nil Loc)) (_ emp Loc Node)) (and (distinct xr11 z) (sep (pto xr11 (node xl111 xr111)) (and (= xl111 (as nil Loc)) (_ emp Loc Node)) (and (= xr111 (as nil Loc)) (_ emp Loc Node)))))))))) (and (distinct yr z) (sep (pto yr (node yl1 yr1)) (or (and (= yl1 (as nil Loc)) (_ emp Loc Node)) (and (distinct yl1 z) (sep (pto yl1 (node xl10 xr10)) (or (and (= xl10 (as nil Loc)) (_ emp Loc Node)) (and (distinct xl10 z) (sep (pto xl10 (node xl100 xr100)) (and (= xl100 (as nil Loc)) (_ emp Loc Node)) (and (= xr100 (as nil Loc)) (_ emp Loc Node))))) (or (and (= xr10 (as nil Loc)) (_ emp Loc Node)) (and (distinct xr10 z) (sep (pto xr10 (node xl101 xr101)) (and (= xl101 (as nil Loc)) (_ emp Loc Node)) (and (= xr101 (as nil Loc)) (_ emp Loc Node)))))))) (or (and (= yr1 z) (_ emp Loc Node)) (and (distinct yr1 z) (sep (pto yr1 (node yl11 yr11)) (or (and (= yl11 z) (_ emp Loc Node)) (and (distinct yl11 z) (sep (pto yl11 (node yl110 yr110)) (and (= yl110 z) (_ emp Loc Node)) (and (= yr110 (as nil Loc)) (_ emp Loc Node)))) (and (distinct yl11 z) (sep (pto yl11 (node yl110 yr110)) (and (= yl110 (as nil Loc)) (_ emp Loc Node)) (and (= yr110 z) (_ emp Loc Node))))) (or (and (= yr11 (as nil Loc)) (_ emp Loc Node)) (and (distinct yr11 z) (sep (pto yr11 (node xl111 xr111)) (and (= xl111 (as nil Loc)) (_ emp Loc Node)) (and (= xr111 (as nil Loc)) (_ emp Loc Node))))))) (and (distinct yr1 z) (sep (pto yr1 (node yl11 yr11)) (or (and (= yl11 (as nil Loc)) (_ emp Loc Node)) (and (distinct yl11 z) (sep (pto yl11 (node xl110 xr110)) (and (= xl110 (as nil Loc)) (_ emp Loc Node)) (and (= xr110 (as nil Loc)) (_ emp Loc Node))))) (or (and (= yr11 z) (_ emp Loc Node)) (and (distinct yr11 z) (sep (pto yr11 (node yl111 yr111)) (and (= yl111 z) (_ emp Loc Node)) (and (= yr111 (as nil Loc)) (_ emp Loc Node)))) (and (distinct yr11 z) (sep (pto yr11 (node yl111 yr111)) (and (= yl111 (as nil Loc)) (_ emp Loc Node)) (and (= yr111 z) (_ emp Loc Node)))))))))))))))

(define-fun tseg4 ((u Loc) (v Loc)) Bool (or (and (= u v) (_ emp Loc Node)) (sep (pto u (node ul ur)) (or (and (= ul v) (_ emp Loc Node)) (sep (pto ul (node ul0 ur0)) (or (and (= ul0 v) (_ emp Loc Node)) (sep (pto ul0 (node ul00 ur00)) (or (and (= ul00 v) (_ emp Loc Node)) (sep (pto ul00 (node ul000 ur000)) (and (= ul000 v) (_ emp Loc Node)) (and (= ur000 (as nil Loc)) (_ emp Loc Node))) (sep (pto ul00 (node ul000 ur000)) (and (= ul000 (as nil Loc)) (_ emp Loc Node)) (and (= ur000 v) (_ emp Loc Node)))) (or (and (= ur00 (as nil Loc)) (_ emp Loc Node)) (sep (pto ur00 (node tl001 tr001)) (and (= tl001 (as nil Loc)) (_ emp Loc Node)) (and (= tr001 (as nil Loc)) (_ emp Loc Node))))) (sep (pto ul0 (node ul00 ur00)) (or (and (= ul00 (as nil Loc)) (_ emp Loc Node)) (sep (pto ul00 (node tl000 tr000)) (and (= tl000 (as nil Loc)) (_ emp Loc Node)) (and (= tr000 (as nil Loc)) (_ emp Loc Node)))) (or (and (= ur00 v) (_ emp Loc Node)) (sep (pto ur00 (node ul001 ur001)) (and (= ul001 v) (_ emp Loc Node)) (and (= ur001 (as nil Loc)) (_ emp Loc Node))) (sep (pto ur00 (node ul001 ur001)) (and (= ul001 (as nil Loc)) (_ emp Loc Node)) (and (= ur001 v) (_ emp Loc Node)))))) (or (and (= ur0 (as nil Loc)) (_ emp Loc Node)) (sep (pto ur0 (node tl01 tr01)) (or (and (= tl01 (as nil Loc)) (_ emp Loc Node)) (sep (pto tl01 (node tl010 tr010)) (and (= tl010 (as nil Loc)) (_ emp Loc Node)) (and (= tr010 (as nil Loc)) (_ emp Loc Node)))) (or (and (= tr01 (as nil Loc)) (_ emp Loc Node)) (sep (pto tr01 (node tl011 tr011)) (and (= tl011 (as nil Loc)) (_ emp Loc Node)) (and (= tr011 (as nil Loc)) (_ emp Loc Node))))))) (sep (pto ul (node ul0 ur0)) (or (and (= ul0 (as nil Loc)) (_ emp Loc Node)) (sep (pto ul0 (node tl00 tr00)) (or (and (= tl00 (as nil Loc)) (_ emp Loc Node)) (sep (pto tl00 (node tl000 tr000)) (and (= tl000 (as nil Loc)) (_ emp Loc Node)) (and (= tr000 (as nil Loc)) (_ emp Loc Node)))) (or (and (= tr00 (as nil Loc)) (_ emp Loc Node)) (sep (pto tr00 (node tl001 tr001)) (and (= tl001 (as nil Loc)) (_ emp Loc Node)) (and (= tr001 (as nil Loc)) (_ emp Loc Node)))))) (or (and (= ur0 v) (_ emp Loc Node)) (sep (pto ur0 (node ul01 ur01)) (or (and (= ul01 v) (_ emp Loc Node)) (sep (pto ul01 (node ul010 ur010)) (and (= ul010 v) (_ emp Loc Node)) (and (= ur010 (as nil Loc)) (_ emp Loc Node))) (sep (pto ul01 (node ul010 ur010)) (and (= ul010 (as nil Loc)) (_ emp Loc Node)) (and (= ur010 v) (_ emp Loc Node)))) (or (and (= ur01 (as nil Loc)) (_ emp Loc Node)) (sep (pto ur01 (node tl011 tr011)) (and (= tl011 (as nil Loc)) (_ emp Loc Node)) (and (= tr011 (as nil Loc)) (_ emp Loc Node))))) (sep (pto ur0 (node ul01 ur01)) (or (and (= ul01 (as nil Loc)) (_ emp Loc Node)) (sep (pto ul01 (node tl010 tr010)) (and (= tl010 (as nil Loc)) (_ emp Loc Node)) (and (= tr010 (as nil Loc)) (_ emp Loc Node)))) (or (and (= ur01 v) (_ emp Loc Node)) (sep (pto ur01 (node ul011 ur011)) (and (= ul011 v) (_ emp Loc Node)) (and (= ur011 (as nil Loc)) (_ emp Loc Node))) (sep (pto ur01 (node ul011 ur011)) (and (= ul011 (as nil Loc)) (_ emp Loc Node)) (and (= ur011 v) (_ emp Loc Node)))))))) (or (and (= ur (as nil Loc)) (_ emp Loc Node)) (sep (pto ur (node tl1 tr1)) (or (and (= tl1 (as nil Loc)) (_ emp Loc Node)) (sep (pto tl1 (node tl10 tr10)) (or (and (= tl10 (as nil Loc)) (_ emp Loc Node)) (sep (pto tl10 (node tl100 tr100)) (and (= tl100 (as nil Loc)) (_ emp Loc Node)) (and (= tr100 (as nil Loc)) (_ emp Loc Node)))) (or (and (= tr10 (as nil Loc)) (_ emp Loc Node)) (sep (pto tr10 (node tl101 tr101)) (and (= tl101 (as nil Loc)) (_ emp Loc Node)) (and (= tr101 (as nil Loc)) (_ emp Loc Node)))))) (or (and (= tr1 (as nil Loc)) (_ emp Loc Node)) (sep (pto tr1 (node tl11 tr11)) (or (and (= tl11 (as nil Loc)) (_ emp Loc Node)) (sep (pto tl11 (node tl110 tr110)) (and (= tl110 (as nil Loc)) (_ emp Loc Node)) (and (= tr110 (as nil Loc)) (_ emp Loc Node)))) (or (and (= tr11 (as nil Loc)) (_ emp Loc Node)) (sep (pto tr11 (node tl111 tr111)) (and (= tl111 (as nil Loc)) (_ emp Loc Node)) (and (= tr111 (as nil Loc)) (_ emp Loc Node))))))))) (sep (pto u (node ul ur)) (or (and (= ul (as nil Loc)) (_ emp Loc Node)) (sep (pto ul (node tl0 tr0)) (or (and (= tl0 (as nil Loc)) (_ emp Loc Node)) (sep (pto tl0 (node tl00 tr00)) (or (and (= tl00 (as nil Loc)) (_ emp Loc Node)) (sep (pto tl00 (node tl000 tr000)) (and (= tl000 (as nil Loc)) (_ emp Loc Node)) (and (= tr000 (as nil Loc)) (_ emp Loc Node)))) (or (and (= tr00 (as nil Loc)) (_ emp Loc Node)) (sep (pto tr00 (node tl001 tr001)) (and (= tl001 (as nil Loc)) (_ emp Loc Node)) (and (= tr001 (as nil Loc)) (_ emp Loc Node)))))) (or (and (= tr0 (as nil Loc)) (_ emp Loc Node)) (sep (pto tr0 (node tl01 tr01)) (or (and (= tl01 (as nil Loc)) (_ emp Loc Node)) (sep (pto tl01 (node tl010 tr010)) (and (= tl010 (as nil Loc)) (_ emp Loc Node)) (and (= tr010 (as nil Loc)) (_ emp Loc Node)))) (or (and (= tr01 (as nil Loc)) (_ emp Loc Node)) (sep (pto tr01 (node tl011 tr011)) (and (= tl011 (as nil Loc)) (_ emp Loc Node)) (and (= tr011 (as nil Loc)) (_ emp Loc Node)))))))) (or (and (= ur v) (_ emp Loc Node)) (sep (pto ur (node ul1 ur1)) (or (and (= ul1 v) (_ emp Loc Node)) (sep (pto ul1 (node ul10 ur10)) (or (and (= ul10 v) (_ emp Loc Node)) (sep (pto ul10 (node ul100 ur100)) (and (= ul100 v) (_ emp Loc Node)) (and (= ur100 (as nil Loc)) (_ emp Loc Node))) (sep (pto ul10 (node ul100 ur100)) (and (= ul100 (as nil Loc)) (_ emp Loc Node)) (and (= ur100 v) (_ emp Loc Node)))) (or (and (= ur10 (as nil Loc)) (_ emp Loc Node)) (sep (pto ur10 (node tl101 tr101)) (and (= tl101 (as nil Loc)) (_ emp Loc Node)) (and (= tr101 (as nil Loc)) (_ emp Loc Node))))) (sep (pto ul1 (node ul10 ur10)) (or (and (= ul10 (as nil Loc)) (_ emp Loc Node)) (sep (pto ul10 (node tl100 tr100)) (and (= tl100 (as nil Loc)) (_ emp Loc Node)) (and (= tr100 (as nil Loc)) (_ emp Loc Node)))) (or (and (= ur10 v) (_ emp Loc Node)) (sep (pto ur10 (node ul101 ur101)) (and (= ul101 v) (_ emp Loc Node)) (and (= ur101 (as nil Loc)) (_ emp Loc Node))) (sep (pto ur10 (node ul101 ur101)) (and (= ul101 (as nil Loc)) (_ emp Loc Node)) (and (= ur101 v) (_ emp Loc Node)))))) (or (and (= ur1 (as nil Loc)) (_ emp Loc Node)) (sep (pto ur1 (node tl11 tr11)) (or (and (= tl11 (as nil Loc)) (_ emp Loc Node)) (sep (pto tl11 (node tl110 tr110)) (and (= tl110 (as nil Loc)) (_ emp Loc Node)) (and (= tr110 (as nil Loc)) (_ emp Loc Node)))) (or (and (= tr11 (as nil Loc)) (_ emp Loc Node)) (sep (pto tr11 (node tl111 tr111)) (and (= tl111 (as nil Loc)) (_ emp Loc Node)) (and (= tr111 (as nil Loc)) (_ emp Loc Node))))))) (sep (pto ur (node ul1 ur1)) (or (and (= ul1 (as nil Loc)) (_ emp Loc Node)) (sep (pto ul1 (node tl10 tr10)) (or (and (= tl10 (as nil Loc)) (_ emp Loc Node)) (sep (pto tl10 (node tl100 tr100)) (and (= tl100 (as nil Loc)) (_ emp Loc Node)) (and (= tr100 (as nil Loc)) (_ emp Loc Node)))) (or (and (= tr10 (as nil Loc)) (_ emp Loc Node)) (sep (pto tr10 (node tl101 tr101)) (and (= tl101 (as nil Loc)) (_ emp Loc Node)) (and (= tr101 (as nil Loc)) (_ emp Loc Node)))))) (or (and (= ur1 v) (_ emp Loc Node)) (sep (pto ur1 (node ul11 ur11)) (or (and (= ul11 v) (_ emp Loc Node)) (sep (pto ul11 (node ul110 ur110)) (and (= ul110 v) (_ emp Loc Node)) (and (= ur110 (as nil Loc)) (_ emp Loc Node))) (sep (pto ul11 (node ul110 ur110)) (and (= ul110 (as nil Loc)) (_ emp Loc Node)) (and (= ur110 v) (_ emp Loc Node)))) (or (and (= ur11 (as nil Loc)) (_ emp Loc Node)) (sep (pto ur11 (node tl111 tr111)) (and (= tl111 (as nil Loc)) (_ emp Loc Node)) (and (= tr111 (as nil Loc)) (_ emp Loc Node))))) (sep (pto ur1 (node ul11 ur11)) (or (and (= ul11 (as nil Loc)) (_ emp Loc Node)) (sep (pto ul11 (node tl110 tr110)) (and (= tl110 (as nil Loc)) (_ emp Loc Node)) (and (= tr110 (as nil Loc)) (_ emp Loc Node)))) (or (and (= ur11 v) (_ emp Loc Node)) (sep (pto ur11 (node ul111 ur111)) (and (= ul111 v) (_ emp Loc Node)) (and (= ur111 (as nil Loc)) (_ emp Loc Node))) (sep (pto ur11 (node ul111 ur111)) (and (= ul111 (as nil Loc)) (_ emp Loc Node)) (and (= ur111 v) (_ emp Loc Node)))))))))))

;------- f -------
(assert (= yl ul))
(assert (= yr ur))
(assert (= yl0 ul0))
(assert (= yr0 ur0))
(assert (= yl00 ul00))
(assert (= yr00 ur00))
(assert (= yl000 ul000))
(assert (= yr000 ur000))
(assert (= yl001 ul001))
(assert (= yr001 ur001))
(assert (= yl01 ul01))
(assert (= yr01 ur01))
(assert (= yl010 ul010))
(assert (= yr010 ur010))
(assert (= yl011 ul011))
(assert (= yr011 ur011))
(assert (= yl1 ul1))
(assert (= yr1 ur1))
(assert (= yl10 ul10))
(assert (= yr10 ur10))
(assert (= yl100 ul100))
(assert (= yr100 ur100))
(assert (= yl101 ul101))
(assert (= yr101 ur101))
(assert (= yl11 ul11))
(assert (= yr11 ur11))
(assert (= yl110 ul110))
(assert (= yr110 ur110))
(assert (= yl111 ul111))
(assert (= yr111 ur111))
(assert (= xl0 tl0))
(assert (= xr0 tr0))
(assert (= xl00 tl00))
(assert (= xr00 tr00))
(assert (= xl000 tl000))
(assert (= xr000 tr000))
(assert (= xl001 tl001))
(assert (= xr001 tr001))
(assert (= xl01 tl01))
(assert (= xr01 tr01))
(assert (= xl010 tl010))
(assert (= xr010 tr010))
(assert (= xl011 tl011))
(assert (= xr011 tr011))
(assert (= xl1 tl1))
(assert (= xr1 tr1))
(assert (= xl10 tl10))
(assert (= xr10 tr10))
(assert (= xl100 tl100))
(assert (= xr100 tr100))
(assert (= xl101 tl101))
(assert (= xr101 tr101))
(assert (= xl11 tl11))
(assert (= xr11 tr11))
(assert (= xl110 tl110))
(assert (= xr110 tr110))
(assert (= xl111 tl111))
(assert (= xr111 tr111))
;-----------------

(assert (distinct root end))(assert (distinct yl end))
(assert (distinct yr end))
(assert (distinct yl0 end))
(assert (distinct yr0 end))
(assert (distinct yl00 end))
(assert (distinct yr00 end))
(assert (distinct yl01 end))
(assert (distinct yr01 end))
(assert (distinct yl1 end))
(assert (distinct yr1 end))
(assert (distinct yl10 end))
(assert (distinct yr10 end))
(assert (distinct yl11 end))
(assert (distinct yr11 end))
(assert (distinct xl0 end))
(assert (distinct xr0 end))
(assert (distinct xl00 end))
(assert (distinct xr00 end))
(assert (distinct xl01 end))
(assert (distinct xr01 end))
(assert (distinct xl1 end))
(assert (distinct xr1 end))
(assert (distinct xl10 end))
(assert (distinct xr10 end))
(assert (distinct xl11 end))
(assert (distinct xr11 end))
(assert (distinct yl (as nil Loc)))
(assert (distinct yr (as nil Loc)))
(assert (distinct yl0 (as nil Loc)))
(assert (distinct yr0 (as nil Loc)))
(assert (distinct yl00 (as nil Loc)))
(assert (distinct yr00 (as nil Loc)))
(assert (distinct yl01 (as nil Loc)))
(assert (distinct yr01 (as nil Loc)))
(assert (distinct yl1 (as nil Loc)))
(assert (distinct yr1 (as nil Loc)))
(assert (distinct yl10 (as nil Loc)))
(assert (distinct yr10 (as nil Loc)))
(assert (distinct yl11 (as nil Loc)))
(assert (distinct yr11 (as nil Loc)))
(assert (distinct xl0 (as nil Loc)))
(assert (distinct xr0 (as nil Loc)))
(assert (distinct xl00 (as nil Loc)))
(assert (distinct xr00 (as nil Loc)))
(assert (distinct xl01 (as nil Loc)))
(assert (distinct xr01 (as nil Loc)))
(assert (distinct xl1 (as nil Loc)))
(assert (distinct xr1 (as nil Loc)))
(assert (distinct xl10 (as nil Loc)))
(assert (distinct xr10 (as nil Loc)))
(assert (distinct xl11 (as nil Loc)))
(assert (distinct xr11 (as nil Loc)))

(assert (acyc_tseg4 root end))
(assert (not (tseg4 root end)))

(check-sat)
;(get-model)
