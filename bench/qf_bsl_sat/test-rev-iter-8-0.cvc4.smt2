(set-logic QF_BSL)
(set-info :source | CVC4 - Andrew Reynolds |)
(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :status sat)


(declare-sort Loc 0)
;
(declare-const c0 Loc)

(declare-datatypes (
        (Node 0)
        ) (
        ((node (data Loc) (next Loc)))
        )
)
(declare-heap (Loc Node))
(declare-const loc0 Loc)


(declare-const u Loc)
(declare-const v Loc)
(declare-const a1 Loc)
(declare-const a2 Loc)
(declare-const a3 Loc)
(declare-const a4 Loc)
(declare-const a5 Loc)
(declare-const a6 Loc)
(declare-const a7 Loc)

(declare-const nx1 Loc)
(declare-const nx2 Loc)
(declare-const nx3 Loc)
(declare-const nx4 Loc)
(declare-const nx5 Loc)
(declare-const nx6 Loc)
(declare-const nx7 Loc)
(declare-const nx8 Loc)
(declare-const nx9 Loc)
(declare-const nx10 Loc)
(declare-const nx11 Loc)
(declare-const nx12 Loc)
(declare-const nx13 Loc)
(declare-const nx14 Loc)
(declare-const nx15 Loc)
(declare-const nx16 Loc)
(declare-const nx17 Loc)
(declare-const nx18 Loc)
(declare-const nx19 Loc)
(declare-const nx20 Loc)
(declare-const nx21 Loc)
(declare-const nx22 Loc)
(declare-const nx23 Loc)
(declare-const nx24 Loc)
(declare-const dt1 Loc)
(declare-const dt2 Loc)
(declare-const dt4 Loc)
(declare-const dt5 Loc)
(declare-const dt7 Loc)
(declare-const dt8 Loc)
(declare-const dt10 Loc)
(declare-const dt11 Loc)
(declare-const dt13 Loc)
(declare-const dt14 Loc)
(declare-const dt16 Loc)
(declare-const dt17 Loc)
(declare-const dt19 Loc)
(declare-const dt20 Loc)
(declare-const dt22 Loc)
(declare-const dt23 Loc)

;------- f -------
(assert (= nx1 (as nil Loc)))
(assert (= nx2 (as nil Loc)))
(assert (= nx3 (as nil Loc)))
(assert (= nx4 a7))
(assert (= nx5 a7))
(assert (= nx6 a7))
(assert (= nx7 a6))
(assert (= nx8 a6))
(assert (= nx9 a6))
(assert (= nx10 a5))
(assert (= nx11 a5))
(assert (= nx12 a5))
(assert (= nx13 a4))
(assert (= nx14 a4))
(assert (= nx15 a4))
(assert (= nx16 a3))
(assert (= nx17 a3))
(assert (= nx18 a3))
(assert (= nx19 a2))
(assert (= nx20 a2))
(assert (= nx21 a2))
(assert (= nx22 a1))
(assert (= nx23 a1))
(assert (= nx24 a1))
(assert (= dt1 c0))
(assert (= dt2 c0))
(assert (= dt4 c0))
(assert (= dt5 c0))
(assert (= dt7 c0))
(assert (= dt8 c0))
(assert (= dt10 c0))
(assert (= dt11 c0))
(assert (= dt13 c0))
(assert (= dt14 c0))
(assert (= dt16 c0))
(assert (= dt17 c0))
(assert (= dt19 c0))
(assert (= dt20 c0))
(assert (= dt22 c0))
(assert (= dt23 c0))
;-----------------

(assert (and (sep (pto u (node c0 a1)) (pto a1 (node c0 a2)) (pto a2 (node c0 a3)) (pto a3 (node c0 a4)) (pto a4 (node c0 a5)) (pto a5 (node c0 a6)) (pto a6 (node c0 a7)) (pto a7 (node c0 (as nil Loc)))) (= v (as nil Loc))))

(assert (not (and (sep (pto u (node c0 nx24)) true) (and (sep (pto u (node dt22 nx22)) (wand (pto u (node dt22 v)) (and (sep (pto nx23 (node c0 nx21)) true) (and (sep (pto nx23 (node dt19 nx19)) (wand (pto nx23 (node dt19 u)) (and (sep (pto nx20 (node c0 nx18)) true) (and (sep (pto nx20 (node dt16 nx16)) (wand (pto nx20 (node dt16 nx23)) (and (sep (pto nx17 (node c0 nx15)) true) (and (sep (pto nx17 (node dt13 nx13)) (wand (pto nx17 (node dt13 nx20)) (and (sep (pto nx14 (node c0 nx12)) true) (and (sep (pto nx14 (node dt10 nx10)) (wand (pto nx14 (node dt10 nx17)) (and (sep (pto nx11 (node c0 nx9)) true) (and (sep (pto nx11 (node dt7 nx7)) (wand (pto nx11 (node dt7 nx14)) (and (sep (pto nx8 (node c0 nx6)) true) (and (sep (pto nx8 (node dt4 nx4)) (wand (pto nx8 (node dt4 nx11)) (and (sep (pto nx5 (node c0 nx3)) true) (and (sep (pto nx5 (node dt1 nx1)) (wand (pto nx5 (node dt1 nx8)) (and (= nx2 (as nil Loc)) (sep (pto nx5 (node c0 a7)) (pto a7 (node c0 a6)) (pto a6 (node c0 a5)) (pto a5 (node c0 a4)) (pto a4 (node c0 a3)) (pto a3 (node c0 a2)) (pto a2 (node c0 a1)) (pto a1 (node c0 (as nil Loc))))))) (sep (pto nx5 (node dt2 nx2)) true))))) (sep (pto nx8 (node dt5 nx5)) true))))) (sep (pto nx11 (node dt8 nx8)) true))))) (sep (pto nx14 (node dt11 nx11)) true))))) (sep (pto nx17 (node dt14 nx14)) true))))) (sep (pto nx20 (node dt17 nx17)) true))))) (sep (pto nx23 (node dt20 nx20)) true))))) (sep (pto u (node dt23 nx23)) true)))))

(check-sat)
;(get-model)
