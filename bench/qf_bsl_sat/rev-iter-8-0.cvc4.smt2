(set-logic QF_BSL)
(set-info :source | CVC4 - Andrew Reynolds |)
(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :status sat)


(declare-sort Loc 0)
(declare-heap (Loc Loc))
(declare-const loc0 Loc)

(declare-const u Loc)
(declare-const v Loc)
(declare-const a1 Loc)
(declare-const a2 Loc)
(declare-const a3 Loc)
(declare-const a4 Loc)
(declare-const a5 Loc)
(declare-const a6 Loc)
(declare-const a7 Loc)

(declare-const x0 Loc)
(declare-const y0 Loc)
(declare-const x1 Loc)
(declare-const y1 Loc)
(declare-const x2 Loc)
(declare-const y2 Loc)
(declare-const x3 Loc)
(declare-const y3 Loc)
(declare-const x4 Loc)
(declare-const y4 Loc)
(declare-const x5 Loc)
(declare-const y5 Loc)
(declare-const x6 Loc)
(declare-const y6 Loc)
(declare-const x7 Loc)
(declare-const y7 Loc)

;------- f -------
(assert (= x0 (as nil Loc)))
(assert (= y0 (as nil Loc)))
(assert (= x1 a7))
(assert (= y1 a7))
(assert (= x2 a6))
(assert (= y2 a6))
(assert (= x3 a5))
(assert (= y3 a5))
(assert (= x4 a4))
(assert (= y4 a4))
(assert (= x5 a3))
(assert (= y5 a3))
(assert (= x6 a2))
(assert (= y6 a2))
(assert (= x7 a1))
(assert (= y7 a1))
;-----------------

(assert (and (sep (pto u a1) (pto a1 a2) (pto a2 a3) (pto a3 a4) (pto a4 a5) (pto a5 a6) (pto a6 a7) (pto a7 (as nil Loc))) (= v (as nil Loc))))

(assert (not (and (sep (pto u x7) (wand (pto u v) (and (sep (pto y7 x6) (wand (pto y7 u) (and (sep (pto y6 x5) (wand (pto y6 y7) (and (sep (pto y5 x4) (wand (pto y5 y6) (and (sep (pto y4 x3) (wand (pto y4 y5) (and (sep (pto y3 x2) (wand (pto y3 y4) (and (sep (pto y2 x1) (wand (pto y2 y3) (and (sep (pto y1 x0) (wand (pto y1 y2) (and (= y0 (as nil Loc)) (sep (pto y1 a7) (pto a7 a6) (pto a6 a5) (pto a5 a4) (pto a4 a3) (pto a3 a2) (pto a2 a1) (pto a1 (as nil Loc)))))) (sep (pto y1 y0) true)))) (sep (pto y2 y1) true)))) (sep (pto y3 y2) true)))) (sep (pto y4 y3) true)))) (sep (pto y5 y4) true)))) (sep (pto y6 y5) true)))) (sep (pto y7 y6) true)))) (sep (pto u y7) true))))

(check-sat)
;(get-model)
